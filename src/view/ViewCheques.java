/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.IssuedChequeController;
import controller.RecievedChequeController;
import controller.IssuedChequeStatusController;
import controller.RecievedChequeStatusController;
import static java.lang.Thread.sleep;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Cheque;
import model.ChequeStatus;

/**
 *
 * @author CM <2222cm@gmail.com>
 */
public class ViewCheques extends javax.swing.JDialog {

    private RecievedChequeController recievedChequeController;
    private IssuedChequeController issuedChequeController;
    private RecievedChequeStatusController recievedChequeStatusController;
    private IssuedChequeStatusController issuedChequeStatusController;
    private DefaultTableModel recievedTableModel, issuedTableModel;
    private ArrayList<Cheque> recievedChequesList, issuedChequesList;
    private ArrayList<ChequeStatus> recievedChequesStatusList, issuedChequesStatusList;
    private String keyR, typeR = "orderId", keyIs, typeIs = "orderId";
    private ButtonGroup buttonGroup1, buttonGroup2;
    private Object[][] recievedArray, issuedArray;
    private int noOfRecievedRecords, noOfIssuedRecords;

    /**
     * Creates new form ViewCheques
     */
    public ViewCheques(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);

        recievedChequesTable.getTableHeader().setReorderingAllowed(false);
        recievedTableModel = (DefaultTableModel) recievedChequesTable.getModel();
        issuedTableModel = (DefaultTableModel) issuedChequesTable.getModel();

        setRecievedTable();
        setIssuedTable();

        buttonGroup1 = new ButtonGroup();
        buttonGroup2 = new ButtonGroup();
        buttonGroup1.add(doneRadioRecieved);
        buttonGroup1.add(pendingRadioRecieved);
        buttonGroup1.add(allRadioRecieved);
        buttonGroup2.add(doneRadioIssued);
        buttonGroup2.add(pendingRadioIssued);
        buttonGroup2.add(allRadioIssued);
        allRadioRecieved.setSelected(true);
        allRadioIssued.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        homeButton = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();
        recievedChequesPanel = new javax.swing.JPanel();
        searchPanelRecieved = new javax.swing.JPanel();
        keyTextRecieved = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        viewAllButtonRecieved = new javax.swing.JButton();
        searchComboRecieved = new javax.swing.JComboBox();
        searchButtonRecieved = new javax.swing.JButton();
        filterPanelRecieved = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        pendingRadioRecieved = new javax.swing.JRadioButton();
        doneRadioRecieved = new javax.swing.JRadioButton();
        allRadioRecieved = new javax.swing.JRadioButton();
        tablePaneRecieved = new javax.swing.JScrollPane();
        recievedChequesTable = new javax.swing.JTable();
        deleteButtonRecieved = new javax.swing.JButton();
        editButtonRecieved = new javax.swing.JButton();
        infoLabelRecieved = new javax.swing.JLabel();
        issuedChequesPanel = new javax.swing.JPanel();
        infoLabelIssued = new javax.swing.JLabel();
        deleteButtonIssued = new javax.swing.JButton();
        editButtonIssued = new javax.swing.JButton();
        filterPanelIssued = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        pendingRadioIssued = new javax.swing.JRadioButton();
        doneRadioIssued = new javax.swing.JRadioButton();
        allRadioIssued = new javax.swing.JRadioButton();
        searchPanelIssued = new javax.swing.JPanel();
        keyTextIssued = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        viewAllButtonIssued = new javax.swing.JButton();
        searchComboIssued = new javax.swing.JComboBox();
        searchButtonIssued = new javax.swing.JButton();
        tablePaneIssued = new javax.swing.JScrollPane();
        issuedChequesTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cheques");

        homeButton.setText("Home");
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });

        searchPanelRecieved.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(200, 200, 200), 1, true));

        keyTextRecieved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyTextRecievedActionPerformed(evt);
            }
        });

        jLabel1.setText("Search by");

        viewAllButtonRecieved.setText("View All");
        viewAllButtonRecieved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllButtonRecievedActionPerformed(evt);
            }
        });

        searchComboRecieved.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Order ID", "Cheque ID", "Bank" }));
        searchComboRecieved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchComboRecievedActionPerformed(evt);
            }
        });

        searchButtonRecieved.setText("Search");
        searchButtonRecieved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonRecievedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelRecievedLayout = new javax.swing.GroupLayout(searchPanelRecieved);
        searchPanelRecieved.setLayout(searchPanelRecievedLayout);
        searchPanelRecievedLayout.setHorizontalGroup(
            searchPanelRecievedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelRecievedLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(keyTextRecieved, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchComboRecieved, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 163, Short.MAX_VALUE)
                .addComponent(searchButtonRecieved, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewAllButtonRecieved, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        searchPanelRecievedLayout.setVerticalGroup(
            searchPanelRecievedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelRecievedLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelRecievedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyTextRecieved, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchComboRecieved, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(viewAllButtonRecieved)
                    .addComponent(searchButtonRecieved))
                .addContainerGap())
        );

        filterPanelRecieved.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(200, 200, 200), 1, true));

        jLabel2.setText("Filter :");

        pendingRadioRecieved.setText("Pending");
        pendingRadioRecieved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pendingRadioRecievedActionPerformed(evt);
            }
        });

        doneRadioRecieved.setText("Done");
        doneRadioRecieved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneRadioRecievedActionPerformed(evt);
            }
        });

        allRadioRecieved.setText("All");
        allRadioRecieved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allRadioRecievedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filterPanelRecievedLayout = new javax.swing.GroupLayout(filterPanelRecieved);
        filterPanelRecieved.setLayout(filterPanelRecievedLayout);
        filterPanelRecievedLayout.setHorizontalGroup(
            filterPanelRecievedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelRecievedLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pendingRadioRecieved)
                .addGap(18, 18, 18)
                .addComponent(doneRadioRecieved)
                .addGap(18, 18, 18)
                .addComponent(allRadioRecieved)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        filterPanelRecievedLayout.setVerticalGroup(
            filterPanelRecievedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelRecievedLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanelRecievedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(pendingRadioRecieved)
                    .addComponent(doneRadioRecieved)
                    .addComponent(allRadioRecieved))
                .addContainerGap())
        );

        tablePaneRecieved.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        recievedChequesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Order", "Number", "Bank", "Issued Date", "Real. Date", "Amount", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        recievedChequesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                recievedChequesTableMouseClicked(evt);
            }
        });
        tablePaneRecieved.setViewportView(recievedChequesTable);
        recievedChequesTable.getColumnModel().getColumn(0).setMinWidth(60);
        recievedChequesTable.getColumnModel().getColumn(0).setMaxWidth(60);
        recievedChequesTable.getColumnModel().getColumn(1).setMinWidth(60);
        recievedChequesTable.getColumnModel().getColumn(1).setMaxWidth(60);
        recievedChequesTable.getColumnModel().getColumn(6).setMinWidth(75);
        recievedChequesTable.getColumnModel().getColumn(6).setMaxWidth(75);

        deleteButtonRecieved.setText("Delete");
        deleteButtonRecieved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonRecievedActionPerformed(evt);
            }
        });

        editButtonRecieved.setText("Edit");
        editButtonRecieved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonRecievedActionPerformed(evt);
            }
        });

        infoLabelRecieved.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        infoLabelRecieved.setText(" ");

        javax.swing.GroupLayout recievedChequesPanelLayout = new javax.swing.GroupLayout(recievedChequesPanel);
        recievedChequesPanel.setLayout(recievedChequesPanelLayout);
        recievedChequesPanelLayout.setHorizontalGroup(
            recievedChequesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recievedChequesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(recievedChequesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tablePaneRecieved)
                    .addComponent(searchPanelRecieved, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(recievedChequesPanelLayout.createSequentialGroup()
                        .addComponent(filterPanelRecieved, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(recievedChequesPanelLayout.createSequentialGroup()
                        .addComponent(infoLabelRecieved, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteButtonRecieved, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButtonRecieved, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        recievedChequesPanelLayout.setVerticalGroup(
            recievedChequesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(recievedChequesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchPanelRecieved, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterPanelRecieved, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tablePaneRecieved, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(recievedChequesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editButtonRecieved)
                    .addComponent(deleteButtonRecieved)
                    .addComponent(infoLabelRecieved))
                .addContainerGap())
        );

        tabbedPane.addTab("Recieved", recievedChequesPanel);

        infoLabelIssued.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        infoLabelIssued.setText(" ");

        deleteButtonIssued.setText("Delete");
        deleteButtonIssued.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonIssuedActionPerformed(evt);
            }
        });

        editButtonIssued.setText("Edit");
        editButtonIssued.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonIssuedActionPerformed(evt);
            }
        });

        filterPanelIssued.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(200, 200, 200), 1, true));

        jLabel3.setText("Filter :");

        pendingRadioIssued.setText("Pending");
        pendingRadioIssued.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pendingRadioIssuedActionPerformed(evt);
            }
        });

        doneRadioIssued.setText("Done");
        doneRadioIssued.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneRadioIssuedActionPerformed(evt);
            }
        });

        allRadioIssued.setText("All");
        allRadioIssued.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allRadioIssuedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filterPanelIssuedLayout = new javax.swing.GroupLayout(filterPanelIssued);
        filterPanelIssued.setLayout(filterPanelIssuedLayout);
        filterPanelIssuedLayout.setHorizontalGroup(
            filterPanelIssuedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelIssuedLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pendingRadioIssued)
                .addGap(18, 18, 18)
                .addComponent(doneRadioIssued)
                .addGap(18, 18, 18)
                .addComponent(allRadioIssued)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        filterPanelIssuedLayout.setVerticalGroup(
            filterPanelIssuedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelIssuedLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanelIssuedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(pendingRadioIssued)
                    .addComponent(doneRadioIssued)
                    .addComponent(allRadioIssued))
                .addContainerGap())
        );

        searchPanelIssued.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(200, 200, 200), 1, true));

        keyTextIssued.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyTextIssuedActionPerformed(evt);
            }
        });

        jLabel4.setText("Search by");

        viewAllButtonIssued.setText("View All");
        viewAllButtonIssued.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllButtonIssuedActionPerformed(evt);
            }
        });

        searchComboIssued.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Order ID", "Cheque ID", "Bank" }));
        searchComboIssued.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchComboIssuedActionPerformed(evt);
            }
        });

        searchButtonIssued.setText("Search");
        searchButtonIssued.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonIssuedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelIssuedLayout = new javax.swing.GroupLayout(searchPanelIssued);
        searchPanelIssued.setLayout(searchPanelIssuedLayout);
        searchPanelIssuedLayout.setHorizontalGroup(
            searchPanelIssuedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelIssuedLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(keyTextIssued, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchComboIssued, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 163, Short.MAX_VALUE)
                .addComponent(searchButtonIssued, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewAllButtonIssued, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        searchPanelIssuedLayout.setVerticalGroup(
            searchPanelIssuedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelIssuedLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelIssuedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyTextIssued, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchComboIssued, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(viewAllButtonIssued)
                    .addComponent(searchButtonIssued))
                .addContainerGap())
        );

        tablePaneIssued.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        issuedChequesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Order", "Number", "Bank", "Issued Date", "Real. Date", "Amount", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        issuedChequesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                issuedChequesTableMouseClicked(evt);
            }
        });
        tablePaneIssued.setViewportView(issuedChequesTable);
        issuedChequesTable.getColumnModel().getColumn(0).setMinWidth(60);
        issuedChequesTable.getColumnModel().getColumn(0).setMaxWidth(60);
        issuedChequesTable.getColumnModel().getColumn(1).setMinWidth(60);
        issuedChequesTable.getColumnModel().getColumn(1).setMaxWidth(60);
        issuedChequesTable.getColumnModel().getColumn(6).setMinWidth(75);
        issuedChequesTable.getColumnModel().getColumn(6).setMaxWidth(75);

        javax.swing.GroupLayout issuedChequesPanelLayout = new javax.swing.GroupLayout(issuedChequesPanel);
        issuedChequesPanel.setLayout(issuedChequesPanelLayout);
        issuedChequesPanelLayout.setHorizontalGroup(
            issuedChequesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(issuedChequesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(issuedChequesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, issuedChequesPanelLayout.createSequentialGroup()
                        .addComponent(infoLabelIssued, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteButtonIssued, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButtonIssued, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tablePaneIssued)
                    .addComponent(searchPanelIssued, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(issuedChequesPanelLayout.createSequentialGroup()
                        .addComponent(filterPanelIssued, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        issuedChequesPanelLayout.setVerticalGroup(
            issuedChequesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, issuedChequesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchPanelIssued, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterPanelIssued, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tablePaneIssued, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(issuedChequesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editButtonIssued)
                    .addComponent(deleteButtonIssued)
                    .addComponent(infoLabelIssued))
                .addContainerGap())
        );

        tabbedPane.addTab("Issued", issuedChequesPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(homeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(tabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(homeButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_homeButtonActionPerformed

    private void viewAllButtonRecievedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllButtonRecievedActionPerformed
        keyTextRecieved.setText("");
        searchComboRecieved.setSelectedIndex(0);
        setRecievedTable();
        allRadioRecieved.setSelected(true);
    }//GEN-LAST:event_viewAllButtonRecievedActionPerformed

    private void searchComboRecievedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchComboRecievedActionPerformed
        int index = searchComboRecieved.getSelectedIndex();
        if (index == 0) {
            typeR = "orderId";
        } else if (index == 1) {
            typeR = "id";
        } else if (index == 2) {
            typeR = "bank";
        }
    }//GEN-LAST:event_searchComboRecievedActionPerformed

    private void searchButtonRecievedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonRecievedActionPerformed
        allRadioRecieved.setSelected(true);
        keyR = keyTextRecieved.getText();
        if (!keyR.equals("")) {
            searchRecievedCheques();
        } else {
            setRecievedTable();
        }
    }//GEN-LAST:event_searchButtonRecievedActionPerformed

    private void keyTextRecievedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyTextRecievedActionPerformed
        searchButtonRecievedActionPerformed(null);
    }//GEN-LAST:event_keyTextRecievedActionPerformed

    private void pendingRadioRecievedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pendingRadioRecievedActionPerformed
        recievedTableModel.setRowCount(0);
        for (int i = 0; i < noOfRecievedRecords; i++) {
            String stat = (String) recievedArray[i][7];
            if (stat.equals("pending")) {
                recievedTableModel.addRow(recievedArray[i]);
            }
        }
    }//GEN-LAST:event_pendingRadioRecievedActionPerformed

    private void doneRadioRecievedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneRadioRecievedActionPerformed
        recievedTableModel.setRowCount(0);
        for (int i = 0; i < noOfRecievedRecords; i++) {
            String stat = (String) recievedArray[i][7];
            if (stat.equals("done")) {
                recievedTableModel.addRow(recievedArray[i]);
            }
        }
    }//GEN-LAST:event_doneRadioRecievedActionPerformed

    private void allRadioRecievedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allRadioRecievedActionPerformed
        recievedTableModel.setRowCount(0);
        for (int i = 0; i < noOfRecievedRecords; i++) {
            recievedTableModel.addRow(recievedArray[i]);
        }
    }//GEN-LAST:event_allRadioRecievedActionPerformed

    private void editButtonRecievedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonRecievedActionPerformed
        int r = recievedChequesTable.getSelectedRow();
        if (r != -1) {
            Cheque c = setCheque(r, "r");
            new EditCheque(null, true, c).setVisible(true);
            setRecievedTable();
        } else {
            displayRecievedMessage("Select a record first");
        }
    }//GEN-LAST:event_editButtonRecievedActionPerformed

    private void deleteButtonRecievedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonRecievedActionPerformed
        int r = recievedChequesTable.getSelectedRow();
        if (r != -1) {
            int conf = JOptionPane.showConfirmDialog(this, "Delete selected record?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (conf == 0) {
                boolean deleted = false;
                recievedChequeController = new RecievedChequeController();

                try {
                    deleted = recievedChequeController.deleteCheque((String) recievedChequesTable.getValueAt(r, 0));
                } catch (SQLException e) {
                } catch (ClassNotFoundException ex) {
                }

                if (deleted) {
                    displayRecievedMessage("Record deleted");
                    setRecievedTable();
                } else {
                    displayRecievedMessage("Record was not deleted");
                }
            }
        } else {
            displayRecievedMessage("Select a record first");
        }
    }//GEN-LAST:event_deleteButtonRecievedActionPerformed

    private void deleteButtonIssuedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonIssuedActionPerformed
        int r = issuedChequesTable.getSelectedRow();
        if (r != -1) {
            int conf = JOptionPane.showConfirmDialog(this, "Delete selected record?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (conf == 0) {
                boolean deleted = false;
                issuedChequeController = new IssuedChequeController();

                try {
                    deleted = issuedChequeController.deleteCheque((String) issuedChequesTable.getValueAt(r, 0));
                } catch (SQLException e) {
                } catch (ClassNotFoundException ex) {
                }

                if (deleted) {
                    displayIssuedMessage("Record deleted");
                    setIssuedTable();
                } else {
                    displayIssuedMessage("Record was not deleted");
                }
            }
        } else {
            displayIssuedMessage("Select a record first");
        }
    }//GEN-LAST:event_deleteButtonIssuedActionPerformed

    private void editButtonIssuedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonIssuedActionPerformed
        int r = issuedChequesTable.getSelectedRow();
        if (r != -1) {
            Cheque c = setCheque(r, "i");
            new EditCheque(null, true, c).setVisible(true);
            setIssuedTable();
        } else {
            displayIssuedMessage("Select a record first");
        }
    }//GEN-LAST:event_editButtonIssuedActionPerformed

    private void pendingRadioIssuedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pendingRadioIssuedActionPerformed
        issuedTableModel.setRowCount(0);
        for (int i = 0; i < noOfIssuedRecords; i++) {
            String stat = (String) issuedArray[i][7];
            if (stat.equals("pending")) {
                issuedTableModel.addRow(issuedArray[i]);
            }
        }
    }//GEN-LAST:event_pendingRadioIssuedActionPerformed

    private void doneRadioIssuedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneRadioIssuedActionPerformed
        issuedTableModel.setRowCount(0);
        for (int i = 0; i < noOfIssuedRecords; i++) {
            String stat = (String) issuedArray[i][7];
            if (stat.equals("done")) {
                issuedTableModel.addRow(issuedArray[i]);
            }
        }
    }//GEN-LAST:event_doneRadioIssuedActionPerformed

    private void allRadioIssuedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allRadioIssuedActionPerformed
        issuedTableModel.setRowCount(0);
        for (int i = 0; i < noOfIssuedRecords; i++) {
            issuedTableModel.addRow(issuedArray[i]);
        }
    }//GEN-LAST:event_allRadioIssuedActionPerformed

    private void keyTextIssuedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyTextIssuedActionPerformed
        searchButtonIssuedActionPerformed(null);
    }//GEN-LAST:event_keyTextIssuedActionPerformed

    private void viewAllButtonIssuedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllButtonIssuedActionPerformed
        keyTextIssued.setText("");
        searchComboIssued.setSelectedIndex(0);
        setIssuedTable();
        allRadioIssued.setSelected(true);
    }//GEN-LAST:event_viewAllButtonIssuedActionPerformed

    private void searchComboIssuedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchComboIssuedActionPerformed
        int index = searchComboIssued.getSelectedIndex();
        if (index == 0) {
            typeIs = "orderId";
        } else if (index == 1) {
            typeIs = "id";
        } else if (index == 2) {
            typeIs = "bank";
        }
    }//GEN-LAST:event_searchComboIssuedActionPerformed

    private void searchButtonIssuedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonIssuedActionPerformed
        allRadioIssued.setSelected(true);
        keyIs = keyTextIssued.getText();
        if (!keyIs.equals("")) {
            searchIssuedCheques();
        } else {
            setIssuedTable();
        }
    }//GEN-LAST:event_searchButtonIssuedActionPerformed

    private void recievedChequesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_recievedChequesTableMouseClicked
    }//GEN-LAST:event_recievedChequesTableMouseClicked

    private void issuedChequesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_issuedChequesTableMouseClicked
    }//GEN-LAST:event_issuedChequesTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewCheques.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewCheques.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewCheques.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewCheques.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
//        setGTKLookAndFeel();
        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ViewCheques dialog = new ViewCheques(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton allRadioIssued;
    private javax.swing.JRadioButton allRadioRecieved;
    private javax.swing.JButton deleteButtonIssued;
    private javax.swing.JButton deleteButtonRecieved;
    private javax.swing.JRadioButton doneRadioIssued;
    private javax.swing.JRadioButton doneRadioRecieved;
    private javax.swing.JButton editButtonIssued;
    private javax.swing.JButton editButtonRecieved;
    private javax.swing.JPanel filterPanelIssued;
    private javax.swing.JPanel filterPanelRecieved;
    private javax.swing.JButton homeButton;
    private javax.swing.JLabel infoLabelIssued;
    private javax.swing.JLabel infoLabelRecieved;
    private javax.swing.JPanel issuedChequesPanel;
    private javax.swing.JTable issuedChequesTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField keyTextIssued;
    private javax.swing.JTextField keyTextRecieved;
    private javax.swing.JRadioButton pendingRadioIssued;
    private javax.swing.JRadioButton pendingRadioRecieved;
    private javax.swing.JPanel recievedChequesPanel;
    private javax.swing.JTable recievedChequesTable;
    private javax.swing.JButton searchButtonIssued;
    private javax.swing.JButton searchButtonRecieved;
    private javax.swing.JComboBox searchComboIssued;
    private javax.swing.JComboBox searchComboRecieved;
    private javax.swing.JPanel searchPanelIssued;
    private javax.swing.JPanel searchPanelRecieved;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JScrollPane tablePaneIssued;
    private javax.swing.JScrollPane tablePaneRecieved;
    private javax.swing.JButton viewAllButtonIssued;
    private javax.swing.JButton viewAllButtonRecieved;
    // End of variables declaration//GEN-END:variables

    private void displayRecievedMessage(String message) {
        final String msg = message;

        new Thread() {
            public void run() {
                infoLabelRecieved.setText("");
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }

                infoLabelRecieved.setText(msg);
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }
                infoLabelRecieved.setText("");
                try {
                    sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }

                infoLabelRecieved.setText(msg);

                try {
                    sleep(5000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
                }

                infoLabelRecieved.setText("");
            }
        }.start();
    }

    private void displayIssuedMessage(String message) {
        final String msg = message;

        new Thread() {
            public void run() {
                infoLabelIssued.setText("");
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }

                infoLabelIssued.setText(msg);
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }
                infoLabelIssued.setText("");
                try {
                    sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }

                infoLabelIssued.setText(msg);

                try {
                    sleep(5000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
                }

                infoLabelIssued.setText("");
            }
        }.start();
    }

    private void setRecievedTable() {
        keyR = "";
        recievedTableModel.setRowCount(0);

        recievedChequeController = new RecievedChequeController();
        recievedChequeStatusController = new RecievedChequeStatusController();

        try {
            recievedChequesList = recievedChequeController.getCheques();
        } catch (SQLException ex) {
            Logger.getLogger(ViewCheques.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ViewCheques.class.getName()).log(Level.SEVERE, null, ex);
        }

        noOfRecievedRecords = recievedChequesList.size();

        for (int i = 0; i < noOfRecievedRecords; i++) {
            Cheque c = recievedChequesList.get(i);
            ChequeStatus cs = null;
            String id = c.getId();

            try {
                recievedChequesStatusList = recievedChequeStatusController.searchChequeStatuses(id, "chequeId");
                cs = recievedChequesStatusList.get(0);
            } catch (SQLException ex) {
                Logger.getLogger(ViewCheques.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ViewCheques.class.getName()).log(Level.SEVERE, null, ex);
            }

            Object[] row = {c.getId(), c.getOrderId(), c.getNumber(), c.getBank(), c.getIssuedDate(), c.getRealDate(), c.getAmount(), cs.getStatus()};
            recievedTableModel.addRow(row);
        }

        setRecievedArray();
    }

    private void searchRecievedCheques() {
        recievedTableModel.setRowCount(0);

        recievedChequeController = new RecievedChequeController();
        recievedChequeStatusController = new RecievedChequeStatusController();

        try {
            recievedChequesList = recievedChequeController.searchCheques(keyR, typeR);
        } catch (SQLException ex) {
            Logger.getLogger(ViewCheques.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ViewCheques.class.getName()).log(Level.SEVERE, null, ex);
        }

        noOfRecievedRecords = recievedChequesList.size();

        for (int i = 0; i < noOfRecievedRecords; i++) {
            Cheque c = recievedChequesList.get(i);
            ChequeStatus cs = null;
            String id = c.getId();

            try {
                recievedChequesStatusList = recievedChequeStatusController.searchChequeStatuses(id, "chequeId");
                cs = recievedChequesStatusList.get(0);
            } catch (SQLException ex) {
                Logger.getLogger(ViewCheques.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ViewCheques.class.getName()).log(Level.SEVERE, null, ex);
            }

            Object[] row = {c.getId(), c.getOrderId(), c.getNumber(), c.getBank(), c.getIssuedDate(), c.getRealDate(), c.getAmount(), cs.getStatus()};
            recievedTableModel.addRow(row);
        }

        setRecievedArray();
    }

    private void setRecievedArray() {
        recievedArray = new Object[noOfRecievedRecords][8];

        for (int i = 0; i < noOfRecievedRecords; i++) {
            for (int j = 0; j < 8; j++) {
                recievedArray[i][j] = recievedChequesTable.getValueAt(i, j);
            }
        }
    }

    private void setIssuedTable() {
        keyIs = "";
        issuedTableModel.setRowCount(0);

        issuedChequeController = new IssuedChequeController();
        issuedChequeStatusController = new IssuedChequeStatusController();

        try {
            issuedChequesList = issuedChequeController.getCheques();
        } catch (SQLException ex) {
            Logger.getLogger(ViewCheques.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ViewCheques.class.getName()).log(Level.SEVERE, null, ex);
        }

        noOfIssuedRecords = issuedChequesList.size();

        for (int i = 0; i < noOfIssuedRecords; i++) {
            Cheque c = issuedChequesList.get(i);
            ChequeStatus cs = null;
            String id = c.getId();

            try {
                issuedChequesStatusList = issuedChequeStatusController.searchChequeStatuses(id, "chequeId");
                cs = issuedChequesStatusList.get(0);
            } catch (SQLException ex) {
                Logger.getLogger(ViewCheques.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ViewCheques.class.getName()).log(Level.SEVERE, null, ex);
            }

            Object[] row = {c.getId(), c.getOrderId(), c.getNumber(), c.getBank(), c.getIssuedDate(), c.getRealDate(), c.getAmount(), cs.getStatus()};
            issuedTableModel.addRow(row);
        }

        setIssuedArray();
    }

    private void searchIssuedCheques() {
        issuedTableModel.setRowCount(0);

        issuedChequeController = new IssuedChequeController();
        issuedChequeStatusController = new IssuedChequeStatusController();

        try {
            issuedChequesList = issuedChequeController.searchCheques(keyIs, typeIs);
        } catch (SQLException ex) {
            Logger.getLogger(ViewCheques.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ViewCheques.class.getName()).log(Level.SEVERE, null, ex);
        }

        noOfIssuedRecords = issuedChequesList.size();

        for (int i = 0; i < noOfIssuedRecords; i++) {
            Cheque c = issuedChequesList.get(i);
            ChequeStatus cs = null;
            String id = c.getId();

            try {
                issuedChequesStatusList = issuedChequeStatusController.searchChequeStatuses(id, "chequeId");
                cs = issuedChequesStatusList.get(0);
            } catch (SQLException ex) {
                Logger.getLogger(ViewCheques.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ViewCheques.class.getName()).log(Level.SEVERE, null, ex);
            }

            Object[] row = {c.getId(), c.getOrderId(), c.getNumber(), c.getBank(), c.getIssuedDate(), c.getRealDate(), c.getAmount(), cs.getStatus()};
            issuedTableModel.addRow(row);
        }

        setIssuedArray();
    }

    private void setIssuedArray() {
        issuedArray = new Object[noOfIssuedRecords][8];

        for (int i = 0; i < noOfIssuedRecords; i++) {
            for (int j = 0; j < 8; j++) {
                issuedArray[i][j] = issuedChequesTable.getValueAt(i, j);
            }
        }
    }

    private Cheque setCheque(int r, String type) {
        Cheque c = null;

        if (type.equals("r")) {
            c = new Cheque((String) recievedChequesTable.getValueAt(r, 0), (String) recievedChequesTable.getValueAt(r, 1), (String) recievedChequesTable.getValueAt(r, 2), (String) recievedChequesTable.getValueAt(r, 3), (String) recievedChequesTable.getValueAt(r, 4), (String) recievedChequesTable.getValueAt(r, 5), (double) recievedChequesTable.getValueAt(r, 6));
        } else if (type.equals("i")) {
            c = new Cheque((String) issuedChequesTable.getValueAt(r, 0), (String) issuedChequesTable.getValueAt(r, 1), (String) issuedChequesTable.getValueAt(r, 2), (String) issuedChequesTable.getValueAt(r, 3), (String) issuedChequesTable.getValueAt(r, 4), (String) issuedChequesTable.getValueAt(r, 5), (double) issuedChequesTable.getValueAt(r, 6));
        }

        return c;
    }
}