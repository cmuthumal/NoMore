/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.toedter.calendar.JCalendar;
import controller.CustomerController;
import controller.ItemController;
import controller.CustomerOrderController;
import controller.CustomerOrderDetailController;
import extra.Extra;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import static java.lang.Thread.sleep;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Customer;
import model.Item;
import model.Order;
import model.OrderDetail;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author CM <2222cm@gmail.com>
 */
public class CustomerOrder extends javax.swing.JDialog {

    private CustomerOrderController orderController;
    private CustomerOrderDetailController orderDetailController;
    private CustomerController customerController;
    private ItemController itemController;
    private ArrayList<Order> orderList;
    private ArrayList<OrderDetail> orderDetailList;
    private ArrayList<Customer> customersList;
    private ArrayList<Item> itemsList;
    private DefaultTableModel orderTableModel, orderDetailTableModel;
    private String[] customerIDs = null;
    private String lastOrderID = "";
    private boolean customerFlag, addedDateFlag, dueDateFlag, discountFlag;
    private final SimpleDateFormat dateFormat;
    private int mode = 0, selectedRow = -1;

    /**
     * Creates new form ViewOrderForm
     */
    public CustomerOrder(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);

        setCustomersCombo();
        setEditPanel(false);
        setDetailsPanel(false);
        setCalendar(addedDateText.getJCalendar());
        setCalendar(dueDateText.getJCalendar());

        ordersTable.getTableHeader().setReorderingAllowed(false);
        orderTableModel = (DefaultTableModel) ordersTable.getModel();
        orderDetailTableModel = (DefaultTableModel) orderDetailsTable.getModel();
        dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        viewAllButtonActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        homeButton = new javax.swing.JButton();
        ordersPanel = new javax.swing.JPanel();
        searchActionPanel = new javax.swing.JPanel();
        viewAllButton = new javax.swing.JButton();
        searchByLabel = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        searchCombo = new javax.swing.JComboBox();
        searchText = new javax.swing.JTextField();
        viewOrdersPanel = new javax.swing.JPanel();
        deleteOrderButton = new javax.swing.JButton();
        editOrderButton = new javax.swing.JButton();
        addOrderButton = new javax.swing.JButton();
        orderTablePane = new javax.swing.JScrollPane();
        ordersTable = new javax.swing.JTable();
        paymentButton = new javax.swing.JButton();
        editOrderPanel = new javax.swing.JPanel();
        jLabel03 = new javax.swing.JLabel();
        orderIDText = new javax.swing.JTextField();
        jLabel01 = new javax.swing.JLabel();
        jLabel02 = new javax.swing.JLabel();
        jLabel04 = new javax.swing.JLabel();
        customersCombo = new javax.swing.JComboBox();
        saveButton = new javax.swing.JButton();
        jLabel05 = new javax.swing.JLabel();
        discountText = new javax.swing.JTextField();
        cancelButton = new javax.swing.JButton();
        addedDateText = new com.toedter.calendar.JDateChooser();
        dueDateText = new com.toedter.calendar.JDateChooser();
        orderDetailsPanel = new javax.swing.JPanel();
        orderDetailTablePane = new javax.swing.JScrollPane();
        orderDetailsTable = new javax.swing.JTable();
        totalLabel = new javax.swing.JLabel();
        addItemButton = new javax.swing.JButton();
        deleteItemButton = new javax.swing.JButton();
        discountTextOD = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        subTotalLabel = new javax.swing.JLabel();
        dueDateLabel = new javax.swing.JLabel();
        addedDateLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        customerIDLabel = new javax.swing.JLabel();
        orderIDLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        editItemButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        printButton = new javax.swing.JButton();
        infoLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Orders");
        setResizable(false);

        homeButton.setText("Home");
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });

        ordersPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(100, 100, 100), 1, true));

        searchActionPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(200, 200, 200), 1, true));

        viewAllButton.setText("View All");
        viewAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllButtonActionPerformed(evt);
            }
        });

        searchByLabel.setText("Search by");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        searchCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Order ID", "Customer ID" }));
        searchCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchComboActionPerformed(evt);
            }
        });

        searchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchActionPanelLayout = new javax.swing.GroupLayout(searchActionPanel);
        searchActionPanel.setLayout(searchActionPanelLayout);
        searchActionPanelLayout.setHorizontalGroup(
            searchActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchActionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchByLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        searchActionPanelLayout.setVerticalGroup(
            searchActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchActionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchByLabel)
                    .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewAllButton)
                    .addComponent(searchButton))
                .addContainerGap())
        );

        viewOrdersPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(150, 150, 150), 1, true));

        deleteOrderButton.setText("Delete");
        deleteOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteOrderButtonActionPerformed(evt);
            }
        });

        editOrderButton.setText("Edit");
        editOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editOrderButtonActionPerformed(evt);
            }
        });

        addOrderButton.setText("Add");
        addOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOrderButtonActionPerformed(evt);
            }
        });

        orderTablePane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        ordersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Customer", "Added Date", "Due Date", "Discount", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ordersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ordersTableMouseClicked(evt);
            }
        });
        orderTablePane.setViewportView(ordersTable);
        ordersTable.getColumnModel().getColumn(0).setMinWidth(70);
        ordersTable.getColumnModel().getColumn(0).setMaxWidth(70);
        ordersTable.getColumnModel().getColumn(1).setMinWidth(80);
        ordersTable.getColumnModel().getColumn(1).setMaxWidth(80);
        ordersTable.getColumnModel().getColumn(2).setMinWidth(100);
        ordersTable.getColumnModel().getColumn(2).setMaxWidth(100);
        ordersTable.getColumnModel().getColumn(3).setMinWidth(100);
        ordersTable.getColumnModel().getColumn(3).setMaxWidth(100);
        ordersTable.getColumnModel().getColumn(4).setMinWidth(70);
        ordersTable.getColumnModel().getColumn(4).setMaxWidth(70);
        ordersTable.getColumnModel().getColumn(5).setMinWidth(80);
        ordersTable.getColumnModel().getColumn(5).setMaxWidth(80);

        paymentButton.setText("Payments");
        paymentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout viewOrdersPanelLayout = new javax.swing.GroupLayout(viewOrdersPanel);
        viewOrdersPanel.setLayout(viewOrdersPanelLayout);
        viewOrdersPanelLayout.setHorizontalGroup(
            viewOrdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewOrdersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(viewOrdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(viewOrdersPanelLayout.createSequentialGroup()
                        .addComponent(orderTablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(viewOrdersPanelLayout.createSequentialGroup()
                        .addComponent(paymentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))))
        );
        viewOrdersPanelLayout.setVerticalGroup(
            viewOrdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewOrdersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(orderTablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(viewOrdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteOrderButton)
                    .addComponent(addOrderButton)
                    .addComponent(editOrderButton)
                    .addComponent(paymentButton))
                .addContainerGap())
        );

        editOrderPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(200, 200, 200), 1, true));

        jLabel03.setText("Added date");

        orderIDText.setEditable(false);
        orderIDText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderIDTextActionPerformed(evt);
            }
        });

        jLabel01.setText("Order ID");

        jLabel02.setText("Customer");

        jLabel04.setText("Due date");

        customersCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customersComboActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        saveButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                saveButtonKeyTyped(evt);
            }
        });

        jLabel05.setText("Discount");

        discountText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discountTextActionPerformed(evt);
            }
        });
        discountText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                discountTextKeyTyped(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        addedDateText.setDateFormatString("yyyy-MM-dd");
        addedDateText.setIcon(new ImageIcon("./src/icons/calendar-icon.png"));
        addedDateText.setMaximumSize(new java.awt.Dimension(2147483, 2147483));
        addedDateText.setMinSelectableDate(new java.util.Date(-62135785703000L));

        dueDateText.setDateFormatString("yyyy-MM-dd");
        dueDateText.setIcon(new ImageIcon("./src/icons/calendar-icon.png"));
        dueDateText.setMaximumSize(new java.awt.Dimension(2147483, 2147483));
        dueDateText.setMinSelectableDate(new java.util.Date(-62135785703000L));

        javax.swing.GroupLayout editOrderPanelLayout = new javax.swing.GroupLayout(editOrderPanel);
        editOrderPanel.setLayout(editOrderPanelLayout);
        editOrderPanelLayout.setHorizontalGroup(
            editOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editOrderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(editOrderPanelLayout.createSequentialGroup()
                        .addComponent(jLabel05, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(discountText))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editOrderPanelLayout.createSequentialGroup()
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(editOrderPanelLayout.createSequentialGroup()
                        .addGroup(editOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel03, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(jLabel04, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel01, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel02, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(editOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addedDateText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(customersCombo, 0, 200, Short.MAX_VALUE)
                            .addComponent(orderIDText)
                            .addComponent(dueDateText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        editOrderPanelLayout.setVerticalGroup(
            editOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editOrderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel01)
                    .addComponent(orderIDText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel02)
                    .addComponent(customersCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addedDateText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel03, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dueDateText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel04, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel05)
                    .addComponent(discountText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(editOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout ordersPanelLayout = new javax.swing.GroupLayout(ordersPanel);
        ordersPanel.setLayout(ordersPanelLayout);
        ordersPanelLayout.setHorizontalGroup(
            ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ordersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchActionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(ordersPanelLayout.createSequentialGroup()
                        .addComponent(viewOrdersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        ordersPanelLayout.setVerticalGroup(
            ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ordersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchActionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ordersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editOrderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(viewOrdersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        orderDetailsPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(150, 150, 150), 1, true));

        orderDetailTablePane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        orderDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Description", "Qty", "Unit Price", "Amount", "Discount", "Net Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderDetailsTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        orderDetailTablePane.setViewportView(orderDetailsTable);
        orderDetailsTable.getColumnModel().getColumn(0).setMinWidth(50);
        orderDetailsTable.getColumnModel().getColumn(0).setMaxWidth(50);
        orderDetailsTable.getColumnModel().getColumn(2).setMinWidth(50);
        orderDetailsTable.getColumnModel().getColumn(2).setMaxWidth(50);
        orderDetailsTable.getColumnModel().getColumn(3).setMinWidth(80);
        orderDetailsTable.getColumnModel().getColumn(3).setMaxWidth(80);
        orderDetailsTable.getColumnModel().getColumn(4).setMinWidth(80);
        orderDetailsTable.getColumnModel().getColumn(4).setMaxWidth(80);
        orderDetailsTable.getColumnModel().getColumn(5).setMinWidth(80);
        orderDetailsTable.getColumnModel().getColumn(5).setMaxWidth(80);
        orderDetailsTable.getColumnModel().getColumn(6).setMinWidth(95);
        orderDetailsTable.getColumnModel().getColumn(6).setMaxWidth(95);

        totalLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        totalLabel.setText(" ");

        addItemButton.setText("Add");
        addItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemButtonActionPerformed(evt);
            }
        });

        deleteItemButton.setText("Delete");
        deleteItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemButtonActionPerformed(evt);
            }
        });

        discountTextOD.setEditable(false);
        discountTextOD.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel5.setText("Discount");

        subTotalLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        subTotalLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        subTotalLabel.setText(" ");

        dueDateLabel.setText(" ");

        jLabel3.setText("Added Date");

        jLabel4.setText("Due Date");

        jLabel1.setText("Order ID");

        jLabel2.setText("Customer");

        editItemButton.setText("Edit");
        editItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editItemButtonActionPerformed(evt);
            }
        });

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Total :");

        jLabel7.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel7.setText("Sub Total :");

        printButton.setText("Print");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout orderDetailsPanelLayout = new javax.swing.GroupLayout(orderDetailsPanel);
        orderDetailsPanel.setLayout(orderDetailsPanelLayout);
        orderDetailsPanelLayout.setHorizontalGroup(
            orderDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(orderDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(orderDetailTablePane)
                    .addGroup(orderDetailsPanelLayout.createSequentialGroup()
                        .addGroup(orderDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(orderDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(orderIDLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(customerIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(orderDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(orderDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addedDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dueDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderDetailsPanelLayout.createSequentialGroup()
                        .addComponent(addItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(printButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(discountTextOD, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(orderDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(orderDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(totalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(subTotalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE))))
                .addContainerGap())
        );
        orderDetailsPanelLayout.setVerticalGroup(
            orderDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orderDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(orderDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(orderDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(addedDateLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addGroup(orderDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(orderIDLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(orderDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(orderDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(dueDateLabel))
                    .addGroup(orderDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(customerIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(orderDetailTablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(orderDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(orderDetailsPanelLayout.createSequentialGroup()
                        .addComponent(totalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(orderDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addItemButton)
                            .addComponent(deleteItemButton)
                            .addComponent(editItemButton)
                            .addComponent(printButton)))
                    .addGroup(orderDetailsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(orderDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(discountTextOD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(subTotalLabel))))
                .addContainerGap())
        );

        infoLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        infoLabel.setText(" ");
        infoLabel.setPreferredSize(new java.awt.Dimension(400, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(homeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(orderDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ordersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ordersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orderDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(homeButton)
                    .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editOrderButtonActionPerformed
        mode = 2;
        clearAndSet(false);
        if (ordersTable.getSelectedRow() != -1) {
            setEditPanel(true);
            setEditPanelValues(ordersTable.getSelectedRow());
        } else {
            displayMessage("Select an order first");
        }
    }//GEN-LAST:event_editOrderButtonActionPerformed

    private void searchComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchComboActionPerformed
    }//GEN-LAST:event_searchComboActionPerformed

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_homeButtonActionPerformed

    private void deleteOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteOrderButtonActionPerformed
        clearAndSet(false);
        if (ordersTable.getSelectedRow() != -1) {
            int confirmation = JOptionPane.showConfirmDialog(viewOrdersPanel, "Delete selected order?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (confirmation == 0) {
                boolean deleted = false;
                String id = (String) ordersTable.getValueAt(ordersTable.getSelectedRow(), 0);
                orderController = new CustomerOrderController();
                try {
                    releaseItems(id);
                    deleted = orderController.deleteOrder(id);
                } catch (SQLException ex) {
                    Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (deleted) {
                    viewAllButtonActionPerformed(null);
                    displayMessage("Order deleted successfully");
                } else {
                    displayMessage("Order was not deleted");
                }
            }
        } else {
            displayMessage("Select an order first");
        }
    }//GEN-LAST:event_deleteOrderButtonActionPerformed

    private void ordersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ordersTableMouseClicked
        if (evt.getClickCount() == 1) {
            clearAndSet(false);
            selectedRow = ordersTable.getSelectedRow();
        } else if (evt.getClickCount() == 2) {
            setOrderDetailsPanelValues(ordersTable.getSelectedRow());
            setDetailsPanel(true);
        }
    }//GEN-LAST:event_ordersTableMouseClicked

    private void addOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrderButtonActionPerformed
        mode = 1;
        clearAndSet(false);
        viewAllButtonActionPerformed(null);
        setEditPanel(true);

        orderIDText.setText(new Extra().getNextID(lastOrderID));
        Date today = new Date();
        addedDateText.setDate(today);
        discountText.setText("0");
    }//GEN-LAST:event_addOrderButtonActionPerformed

    private void searchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextActionPerformed
        clearAndSet(false);
        if (!searchText.getText().equals("")) {
            String key, type = "id";
            key = searchText.getText();
            if (searchCombo.getSelectedIndex() == 1) {
                type = "customerId";
            }

            try {
                orderList = orderController.searchOrder(key, type);
            } catch (SQLException ex) {
                Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
            }

            orderTableModel.setRowCount(0);
            for (int i = 0; i < orderList.size(); i++) {
                Order o = orderList.get(i);
                Object[] row = {o.getId(), o.getCustomerId(), o.getAddedDate(), o.getDueDate(), o.getDiscount(), o.getAmount()};
                orderTableModel.addRow(row);
            }
        } else {
            viewAllButtonActionPerformed(null);
        }
    }//GEN-LAST:event_searchTextActionPerformed

    private void addItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemButtonActionPerformed
        new AddOrderDetails(null, true, orderIDLabel.getText()).setVisible(true);
        setOrderDetailsPanelValues(ordersTable.getSelectedRow());

        double subTotal = Double.parseDouble(subTotalLabel.getText());
        updateOrder(orderIDLabel.getText(), subTotal);

        viewAllButtonActionPerformed(null);
        setOrderDetailsPanelValues(selectedRow);
        setDetailsPanel(true);
    }//GEN-LAST:event_addItemButtonActionPerformed

    private void deleteItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItemButtonActionPerformed
        if (orderDetailsTable.getSelectedRow() != -1) {
            int confirmation = JOptionPane.showConfirmDialog(orderDetailsPanel, "Delete selected item from order?", "Confirm", JOptionPane.YES_NO_OPTION);
            boolean deleted = false;
            if (confirmation == 0) {
                String itemCode = (String) orderDetailsTable.getValueAt(orderDetailsTable.getSelectedRow(), 0);
                int qty = (int) orderDetailsTable.getValueAt(orderDetailsTable.getSelectedRow(), 2);

                orderDetailController = new CustomerOrderDetailController();

                try {
                    deleted = orderDetailController.deleteOrderDetail(orderIDLabel.getText(), itemCode);
                } catch (SQLException ex) {
                    Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
                }

                if (deleted) {
                    setItem(itemCode, qty);
                    displayMessage("Item deleted successfully");
                    setOrderDetailsPanelValues(ordersTable.getSelectedRow());

                    double subTotal = Double.parseDouble(subTotalLabel.getText());
                    updateOrder(orderIDLabel.getText(), subTotal);

                    viewAllButtonActionPerformed(null);
                    setOrderDetailsPanelValues(selectedRow);
                    setDetailsPanel(true);
                } else {
                    displayMessage("Item was not deleted");
                }
            }
        } else {
            displayMessage("Select an item first");
        }
    }//GEN-LAST:event_deleteItemButtonActionPerformed

    private void viewAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllButtonActionPerformed
        clearAndSet(false);
        searchText.setText("");
        searchCombo.setSelectedIndex(0);

        orderController = new CustomerOrderController();
        try {
            orderList = orderController.getAllOrders();
        } catch (SQLException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        }

        orderTableModel.setRowCount(0);
        for (int i = 0; i < orderList.size(); i++) {
            Order o = orderList.get(i);
            String dis = String.format("%.2f", o.getDiscount());
            String am = String.format("%.2f", o.getAmount());
            Object[] row = {o.getId(), o.getCustomerId(), o.getAddedDate(), o.getDueDate(), Double.parseDouble(dis), Double.parseDouble(am)};
            orderTableModel.addRow(row);
            lastOrderID = o.getId();
        }
    }//GEN-LAST:event_viewAllButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        Order newOrder = setOrder();

        if (!customerFlag) {
            displayMessage("Select a customer");
        } else if (!addedDateFlag) {
            displayMessage("Enter added date correctly");
        } else if (!dueDateFlag) {
            displayMessage("Enter due date correctly");
        } else if (!discountFlag) {
            displayMessage("Enter a valid discount value");
            discountText.requestFocus();
        } else {
            orderController = new CustomerOrderController();

            if (mode == 1) {
                boolean added = false;
                try {
                    added = orderController.addOrder(newOrder);
                } catch (SQLException ex) {
                    Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (added) {
                    viewAllButtonActionPerformed(null);
                    clearAndSet(false);
                    displayMessage("Order added successfully");
                } else {
                    displayMessage("Order was not added");
                }
            } else if (mode == 2) {
                double am = getAmount(newOrder.getId());
                newOrder.setAmount(am - (am * newOrder.getDiscount() / 100));

                boolean updated = false;
                try {
                    updated = orderController.updateOrder(newOrder);
                } catch (SQLException ex) {
                    Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (updated) {
                    viewAllButtonActionPerformed(null);
                    clearAndSet(false);
                    displayMessage("Order updated successfully");
                } else {
                    displayMessage("Order was not updated");
                }
            }
            mode = 0;
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void customersComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customersComboActionPerformed
    }//GEN-LAST:event_customersComboActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchTextActionPerformed(null);
    }//GEN-LAST:event_searchButtonActionPerformed

    private void discountTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_discountTextKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || (c == KeyEvent.VK_PERIOD))) {
            evt.consume();
        }
    }//GEN-LAST:event_discountTextKeyTyped

    private void orderIDTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderIDTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_orderIDTextActionPerformed

    private void discountTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discountTextActionPerformed
    }//GEN-LAST:event_discountTextActionPerformed

    private void paymentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentButtonActionPerformed
        clearAndSet(false);
        if (ordersTable.getSelectedRow() != -1) {
            String oid = (String) ordersTable.getValueAt(ordersTable.getSelectedRow(), 0);
            String cid = (String) ordersTable.getValueAt(ordersTable.getSelectedRow(), 1);
            double am = (double) ordersTable.getValueAt(ordersTable.getSelectedRow(), 5);
            new Payments(null, true, oid, cid, am).setVisible(true);
        } else {
            displayMessage("Select an order first");
        }
    }//GEN-LAST:event_paymentButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        clearAndSet(false);
        mode = 0;
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveButtonKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c))) {
            evt.consume();
        }
    }//GEN-LAST:event_saveButtonKeyTyped

    private void editItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editItemButtonActionPerformed
        if (orderDetailsTable.getSelectedRow() != -1) {
            String code = (String) orderDetailsTable.getValueAt(orderDetailsTable.getSelectedRow(), 0);
            int qty = (int) orderDetailsTable.getValueAt(orderDetailsTable.getSelectedRow(), 2);
            double discount = (double) orderDetailsTable.getValueAt(orderDetailsTable.getSelectedRow(), 5);

            new EditOrderDetails(null, true, orderIDLabel.getText(), code, qty, discount).setVisible(true);
            setOrderDetailsPanelValues(selectedRow);

            double subTotal = Double.parseDouble(subTotalLabel.getText());
            updateOrder(orderIDLabel.getText(), subTotal);

            viewAllButtonActionPerformed(null);
            setOrderDetailsPanelValues(selectedRow);
            setDetailsPanel(true);
        } else {
            displayMessage("Select an item first");
        }
    }//GEN-LAST:event_editItemButtonActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        try {
            String invoiceNo = "IN0001";
            String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
            String orderID = orderIDLabel.getText();
            String custID = customerIDLabel.getText();
            String addedDate = addedDateLabel.getText();
            String dueDate = dueDateLabel.getText();
            String total = totalLabel.getText();
            String discount = discountTextOD.getText();
            String subTotal = subTotalLabel.getText();

            JRTableModelDataSource jrtmds = new JRTableModelDataSource(orderDetailTableModel);

            Map dataSource = new HashMap();
            dataSource.put("details", jrtmds);

            Map param = new HashMap();
            param.put("invoiceNo", invoiceNo);
            param.put("date", date);
            param.put("orderID", orderID);
            param.put("customerID", custID);
            param.put("addedDate", addedDate);
            param.put("dueDate", dueDate);
            param.put("total", total);
            param.put("discount", discount);
            param.put("subTotal", subTotal);

            JasperReport jr = JasperCompileManager.compileReport("./src/report/CustomerPayment.jrxml");
            JasperPrint jp = JasperFillManager.fillReport(jr, param, jrtmds);
            JasperViewer.viewReport(jp, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, "Report generation failed.");
        }
    }//GEN-LAST:event_printButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CustomerOrder dialog = new CustomerOrder(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addItemButton;
    private javax.swing.JButton addOrderButton;
    private javax.swing.JLabel addedDateLabel;
    private com.toedter.calendar.JDateChooser addedDateText;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel customerIDLabel;
    private javax.swing.JComboBox customersCombo;
    private javax.swing.JButton deleteItemButton;
    private javax.swing.JButton deleteOrderButton;
    private javax.swing.JTextField discountText;
    private javax.swing.JTextField discountTextOD;
    private javax.swing.JLabel dueDateLabel;
    private com.toedter.calendar.JDateChooser dueDateText;
    private javax.swing.JButton editItemButton;
    private javax.swing.JButton editOrderButton;
    private javax.swing.JPanel editOrderPanel;
    private javax.swing.JButton homeButton;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JLabel jLabel01;
    private javax.swing.JLabel jLabel02;
    private javax.swing.JLabel jLabel03;
    private javax.swing.JLabel jLabel04;
    private javax.swing.JLabel jLabel05;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane orderDetailTablePane;
    private javax.swing.JPanel orderDetailsPanel;
    private javax.swing.JTable orderDetailsTable;
    private javax.swing.JLabel orderIDLabel;
    private javax.swing.JTextField orderIDText;
    private javax.swing.JScrollPane orderTablePane;
    private javax.swing.JPanel ordersPanel;
    private javax.swing.JTable ordersTable;
    private javax.swing.JButton paymentButton;
    private javax.swing.JButton printButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel searchActionPanel;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel searchByLabel;
    private javax.swing.JComboBox searchCombo;
    private javax.swing.JTextField searchText;
    private javax.swing.JLabel subTotalLabel;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JButton viewAllButton;
    private javax.swing.JPanel viewOrdersPanel;
    // End of variables declaration//GEN-END:variables

    private void setCalendar(JCalendar calendar) {
        Dimension size = new Dimension(250, 170);
        calendar.setPreferredSize(size);
        calendar.setWeekOfYearVisible(false);
        calendar.setTodayButtonVisible(true);
    }

    private void setCustomersCombo() {
        customerController = new CustomerController();

        try {
            customersList = customerController.getAllCustomers();
        } catch (SQLException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        }

        customerIDs = new String[customersList.size() + 1];
        customerIDs[0] = "-Select a customer-";

        for (int i = 0; i < customersList.size(); i++) {
            Customer cus = customersList.get(i);
            customerIDs[i + 1] = cus.getId() + "   " + cus.getName();
        }

        customersCombo.setModel(new DefaultComboBoxModel(customerIDs));
    }

    private void setEditPanel(boolean b) {
        jLabel01.setEnabled(b);
        jLabel02.setEnabled(b);
        jLabel03.setEnabled(b);
        jLabel04.setEnabled(b);
        jLabel05.setEnabled(b);
        orderIDText.setEnabled(b);
        customersCombo.setEnabled(b);
        addedDateText.setEnabled(b);
        dueDateText.setEnabled(b);
        discountText.setEnabled(b);
        addedDateText.setEnabled(b);
        saveButton.setEnabled(b);
        cancelButton.setEnabled(b);
    }

    private void setDetailsPanel(boolean b) {
        jLabel1.setEnabled(b);
        jLabel2.setEnabled(b);
        jLabel3.setEnabled(b);
        jLabel4.setEnabled(b);
        jLabel5.setEnabled(b);
        jLabel6.setEnabled(b);
        jLabel7.setEnabled(b);
        orderDetailsTable.setEnabled(b);
        discountTextOD.setEnabled(b);
        addItemButton.setEnabled(b);
        editItemButton.setEnabled(b);
        deleteItemButton.setEnabled(b);
        printButton.setEnabled(b);
    }

    private void clearEditPanel() {
        orderIDText.setText("");
        customersCombo.setSelectedIndex(0);
        addedDateText.setDate(null);
        dueDateText.setDate(null);
        discountText.setText("");
    }

    private void clearDetailsPanel() {
        orderIDLabel.setText("");
        customerIDLabel.setText("");
        addedDateLabel.setText("");
        dueDateLabel.setText("");
        totalLabel.setText("");
        subTotalLabel.setText("");
        orderDetailTableModel.setRowCount(0);
        discountTextOD.setText("");
    }

    private void clearAndSet(boolean b) {
        clearEditPanel();
        clearDetailsPanel();
        setEditPanel(b);
        setDetailsPanel(b);
    }

    private void setOrderDetailsPanelValues(int row) {
        orderIDLabel.setText((String) ordersTable.getValueAt(row, 0));
        customerIDLabel.setText((String) ordersTable.getValueAt(row, 1));
        addedDateLabel.setText((String) ordersTable.getValueAt(row, 2));
        dueDateLabel.setText((String) ordersTable.getValueAt(row, 3));
        discountTextOD.setText(ordersTable.getValueAt(row, 4) + "%");
        setOrderDetailsTable(orderIDLabel.getText(), (double) ordersTable.getValueAt(row, 4));
    }

    private void setOrderDetailsTable(String orderID, double orderDiscount) {
        orderDetailTableModel.setRowCount(0);

        orderDetailController = new CustomerOrderDetailController();
        itemController = new ItemController();

        double total = 0, subTotal = 0;

        try {
            orderDetailList = orderDetailController.getAllOrderDetails(orderID);
        } catch (SQLException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = 0; i < orderDetailList.size(); i++) {
            OrderDetail od = orderDetailList.get(i);
            Item it = null;

            try {
                itemsList = itemController.searchItem(od.getItemCode(), "code");
                it = itemsList.get(0);
            } catch (SQLException ex) {
                Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
            }

            int qty = od.getQty();
            double unitPrice = Double.parseDouble(String.format("%.2f", od.getUnitPrice()));
            double amount = Double.parseDouble(String.format("%.2f", qty * unitPrice));
            double discount = Double.parseDouble(String.format("%.2f", od.getDiscount()));
            double netAmount = Double.parseDouble(String.format("%.2f", amount - (amount * discount / 100)));
            total += netAmount;

            Object[] row = {od.getItemCode(), it.getDescription(), qty, unitPrice, amount, discount, netAmount};
            orderDetailTableModel.addRow(row);
        }
        subTotal = total - (total * orderDiscount / 100);

        totalLabel.setText(String.format("%.2f", total));
        subTotalLabel.setText(String.format("%.2f", subTotal));
    }

    private void setEditPanelValues(int selectedRow) {
        String theID;
        int index = 0;
        Date addedDate, dueDate;

        orderIDText.setText((String) ordersTable.getValueAt(selectedRow, 0));

        String custID = (String) ordersTable.getValueAt(selectedRow, 1);
        for (int i = 0; i < customerIDs.length; i++) {
            theID = customerIDs[i].charAt(0) + "" + customerIDs[i].charAt(1) + "" + customerIDs[i].charAt(2) + "" + customerIDs[i].charAt(3) + "" + customerIDs[i].charAt(4) + "" + customerIDs[i].charAt(5) + "";
            if (custID.equals(theID)) {
                index = i;
            }
        }
        customersCombo.setSelectedIndex(index);

        try {
            addedDate = dateFormat.parse((String) ordersTable.getValueAt(selectedRow, 2));
            dueDate = dateFormat.parse((String) ordersTable.getValueAt(selectedRow, 3));
            addedDateText.setDate(addedDate);
            dueDateText.setDate(dueDate);
        } catch (ParseException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
        discountText.setText(ordersTable.getValueAt(selectedRow, 4) + "");
    }

    private void displayMessage(String message) {
        final String msg = message;

        new Thread() {
            public void run() {
                infoLabel.setText("");
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }

                infoLabel.setText(msg);
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }
                infoLabel.setText("");
                try {
                    sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }

                infoLabel.setText(msg);

                try {
                    sleep(5000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
                }

                infoLabel.setText("");
            }
        }.start();
    }

    private Order setOrder() {
        Order o;
        String customer, customerID = "", addedDate = "", dueDate = "";
        double discount = 0;

        if (customersCombo.getSelectedIndex() != 0) {
            customerFlag = true;
            customer = (String) customersCombo.getSelectedItem();
            customerID = customer.charAt(0) + "" + customer.charAt(1) + "" + customer.charAt(2) + "" + customer.charAt(3) + "";
        }
        if (addedDateText.getDate() != null) {
            Date d = addedDateText.getDate();
            addedDate = dateFormat.format(d);
            if (new Extra().validateDate(addedDate)) {
                addedDateFlag = true;
            }
        }
        if (dueDateText.getDate() != null) {
            Date d = dueDateText.getDate();
            dueDate = dateFormat.format(d);
            if (new Extra().validateDate(dueDate)) {
                dueDateFlag = true;
            }
        }
        if (!discountText.getText().equals("")) {
            discount = Double.parseDouble(discountText.getText());
            if (discount < 99) {
                discountFlag = true;
            }
        } else {
            discountFlag = true;
            discount = 0;
        }

        o = new Order(orderIDText.getText(), customerID, addedDate, dueDate, discount, 0);

        return o;
    }

    private void setItem(String itemCode, int qty) {
        Item oldItem = null, newItem = null;
        itemController = new ItemController();

        try {
            itemsList = itemController.searchItem(itemCode, "code");
            oldItem = itemsList.get(0);
        } catch (SQLException ex) {
            Logger.getLogger(AddOrderDetails.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AddOrderDetails.class.getName()).log(Level.SEVERE, null, ex);
        }

        newItem = new Item(itemCode, oldItem.getDescription(), oldItem.getUnitPrice(), oldItem.getDiscount(), oldItem.getQtyOnHand() + qty, oldItem.getAddedDate(), oldItem.getNotes());

        try {
            itemController.updateItem(newItem);
        } catch (SQLException ex) {
            Logger.getLogger(AddOrderDetails.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AddOrderDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void releaseItems(String id) {
        orderDetailController = new CustomerOrderDetailController();

        try {
            orderDetailList = orderDetailController.getAllOrderDetails(id);
        } catch (SQLException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = 0; i < orderDetailList.size(); i++) {
            OrderDetail od = orderDetailList.get(i);
            setItem(od.getItemCode(), od.getQty());
        }
    }

    private void updateOrder(String orderID, double subTotal) {
        Order o = null, newOrder = null;
        orderController = new CustomerOrderController();

        try {
            orderList = orderController.searchOrder(orderID, "id");
            o = orderList.get(0);
        } catch (SQLException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        }

        newOrder = new Order(orderID, o.getCustomerId(), o.getAddedDate(), o.getDueDate(), o.getDiscount(), subTotal);

        try {
            orderController.updateOrder(newOrder);
        } catch (SQLException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private double getAmount(String orderID) {
        double total = 0;

        orderDetailController = new CustomerOrderDetailController();
        itemController = new ItemController();

        try {
            orderDetailList = orderDetailController.getAllOrderDetails(orderID);
        } catch (SQLException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = 0; i < orderDetailList.size(); i++) {
            OrderDetail od = orderDetailList.get(i);
            double amount = od.getQty() * od.getUnitPrice();
            total += amount - (amount * od.getDiscount() / 100);
        }

        return total;
    }
}