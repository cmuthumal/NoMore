/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.toedter.calendar.JCalendar;
import controller.CustomerPaymentController;
import extra.Extra;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import static java.lang.Thread.sleep;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import model.Payment;

/**
 *
 * @author CM <2222cm@gmail.com>
 */
public class Payments extends javax.swing.JDialog {

    private CustomerPaymentController paymentController;
    private ArrayList<Payment> paymentList;
    private DefaultTableModel tableModel;
    private String orderID, customerID, paymentMethod;
    private double amount, paidAmount, arries;
    private final SimpleDateFormat dateFormat;
    private int mode = 0, selectedRow = -1;
    private boolean dateFlag, paymentFlag, methodFlag;

    /**
     * Creates new form PaymentsForm
     */
    public Payments(java.awt.Frame parent, boolean modal, String orderID, String customerID, double amount) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);

        this.orderID = orderID;
        this.customerID = customerID;
        this.amount = amount;
        this.arries = amount;

        ButtonGroup buttonGroup = new ButtonGroup();
        buttonGroup.add(cashRadio);
        buttonGroup.add(chequeRadio);

        setCalendar(dateText.getJCalendar());

        paymentsTable.getTableHeader().setReorderingAllowed(false);
        tableModel = (DefaultTableModel) paymentsTable.getModel();
        dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        setEditPanel(false);
        setDetails();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        paymentsTablePane = new javax.swing.JScrollPane();
        paymentsTable = new javax.swing.JTable();
        infoPanel = new javax.swing.JPanel();
        orderAmountLabel = new javax.swing.JLabel();
        arriesLabel = new javax.swing.JLabel();
        customerIDLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        orderIDLabel = new javax.swing.JLabel();
        paidAmountLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        editPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        invoiceNoText = new javax.swing.JTextField();
        idLabel = new javax.swing.JLabel();
        cashRadio = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        chequeRadio = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        paymentText = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        dateText = new com.toedter.calendar.JDateChooser();
        infoLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Payments");

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        mainPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(150, 150, 150), 1, true));

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        paymentsTablePane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        paymentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Date", "Payment", "Invoice No", "Method"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        paymentsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paymentsTableMouseClicked(evt);
            }
        });
        paymentsTablePane.setViewportView(paymentsTable);
        paymentsTable.getColumnModel().getColumn(0).setMinWidth(60);
        paymentsTable.getColumnModel().getColumn(0).setMaxWidth(60);

        infoPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(200, 200, 200), 1, true));

        orderAmountLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        orderAmountLabel.setText(" ");

        arriesLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        arriesLabel.setText(" ");

        customerIDLabel.setText(" ");

        jLabel3.setText("Order Amount");

        jLabel2.setText("Customer");

        jLabel1.setText("Order");

        jLabel5.setText("Arries");

        orderIDLabel.setText(" ");

        paidAmountLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        paidAmountLabel.setText(" ");

        jLabel4.setText("Paid Amount");

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(orderIDLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                    .addComponent(customerIDLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(paidAmountLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(orderAmountLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(arriesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(orderIDLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(customerIDLabel)))
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(orderAmountLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(paidAmountLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(arriesLabel))
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)))
                .addContainerGap())
        );

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paymentsTablePane)
                    .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paymentsTablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(editButton)
                    .addComponent(deleteButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        editPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(150, 150, 150), 1, true));

        jLabel6.setText("Date");

        invoiceNoText.setEditable(false);

        idLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        idLabel.setText("ID");

        cashRadio.setText("Cash");
        cashRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashRadioActionPerformed(evt);
            }
        });

        jLabel7.setText("Payment");

        chequeRadio.setText("Cheque");
        chequeRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chequeRadioActionPerformed(evt);
            }
        });

        jLabel9.setText("Method");

        jLabel8.setText("Invoice No");

        paymentText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentTextActionPerformed(evt);
            }
        });
        paymentText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                paymentTextKeyTyped(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        dateText.setDateFormatString("yyyy-MM-dd");
        dateText.setIcon(new ImageIcon("./src/icons/calendar-icon.png"));

        javax.swing.GroupLayout editPanelLayout = new javax.swing.GroupLayout(editPanel);
        editPanel.setLayout(editPanelLayout);
        editPanelLayout.setHorizontalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(editPanelLayout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cashRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                                .addComponent(chequeRadio))
                            .addGroup(editPanelLayout.createSequentialGroup()
                                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(invoiceNoText, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(paymentText)
                                    .addComponent(dateText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(idLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        editPanelLayout.setVerticalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(idLabel)
                .addGap(10, 10, 10)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(paymentText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(invoiceNoText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cashRadio)
                    .addComponent(chequeRadio)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        infoLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        infoLabel.setText(" ");
        infoLabel.setPreferredSize(new java.awt.Dimension(400, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(infoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        if (selectedRow != -1) {
            mode = 2;
            setEditPanelDetails(selectedRow);
            setEditPanel(true);
        } else {
            displayMessage("Select a payment first");
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (paymentsTable.getSelectedRow() != -1) {
            clearAndSet(false);
            int conf = JOptionPane.showConfirmDialog(mainPanel, "Delete selected payment?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (conf == 0) {
                boolean deleted = false;
                paymentController = new CustomerPaymentController();

                try {
                    deleted = paymentController.deletePayment((String) paymentsTable.getValueAt(selectedRow, 0));
                } catch (SQLException ex) {
                    Logger.getLogger(Payments.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Payments.class.getName()).log(Level.SEVERE, null, ex);
                }

                if (deleted) {
                    displayMessage("Payment deleted");
                    setPaymentsTable();
                    setDetails();
                } else {
                    displayMessage("Payment was not deleted");
                }
            }
        } else {
            displayMessage("Select a payment first");
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        mode = 0;
        clearAndSet(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        mode = 1;
        clearAndSet(true);
        setEditPanelDetails(-1);
    }//GEN-LAST:event_addButtonActionPerformed

    private void paymentsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentsTableMouseClicked
        if (evt.getClickCount() == 1) {
            selectedRow = paymentsTable.getSelectedRow();
            clearAndSet(false);
        } else if (evt.getClickCount() == 2) {
            editButtonActionPerformed(null);
        }
    }//GEN-LAST:event_paymentsTableMouseClicked

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        Payment p = setPayment();

        if (!dateFlag) {
            displayMessage("Select a date");
        } else if (!paymentFlag) {
            displayMessage("Enter valid payment amount");
            paymentText.requestFocus();
        } else if (!methodFlag) {
            displayMessage("Select a payment method");
        } else {
            paymentController = new CustomerPaymentController();

            if (mode == 1) {
                if (paymentMethod.equals("cash")) {
                    boolean added = false;
                    try {
                        added = paymentController.addPayment(p);
                    } catch (SQLException ex) {
                        Logger.getLogger(Payments.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(Payments.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (added) {
                        displayMessage("Payment added");
                        setDetails();
                        clearAndSet(false);
                    } else {
                        displayMessage("Payment was not added");
                        setDetails();
                    }
                } else if (paymentMethod.equals("cheque")) {
                    new ChequesEdit(null, true, p, 1).setVisible(true);
                    setDetails();
                    clearAndSet(false);
                }
            } else if (mode == 2) {
                if (paymentMethod.equals("cash")) {
                    boolean updated = false;
                    try {
                        updated = paymentController.updatePayment(p);
                    } catch (SQLException ex) {
                        Logger.getLogger(Payments.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(Payments.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (updated) {
                        displayMessage("Payment updated");
                        setDetails();
                        clearAndSet(false);
                    } else {
                        displayMessage("Payment was not updated");
                        setDetails();
                    }
                } else if (paymentMethod.equals("cheque")) {
                    Payment pay = setChequeID(p);
                    new ChequesEdit(null, true, pay, 2).setVisible(true);
                    setDetails();
                    clearAndSet(false);
                }
            }
        }
        mode = 0;
    }//GEN-LAST:event_saveButtonActionPerformed

    private void paymentTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paymentTextKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || (c == KeyEvent.VK_PERIOD))) {
            evt.consume();
        }
    }//GEN-LAST:event_paymentTextKeyTyped

    private void paymentTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentTextActionPerformed
        saveButton.requestFocus();
    }//GEN-LAST:event_paymentTextActionPerformed

    private void cashRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cashRadioActionPerformed
        paymentMethod = "cash";
    }//GEN-LAST:event_cashRadioActionPerformed

    private void chequeRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chequeRadioActionPerformed
        paymentMethod = "cheque";
    }//GEN-LAST:event_chequeRadioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Payments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Payments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Payments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Payments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel arriesLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton cashRadio;
    private javax.swing.JRadioButton chequeRadio;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel customerIDLabel;
    private com.toedter.calendar.JDateChooser dateText;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JPanel editPanel;
    private javax.swing.JLabel idLabel;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JTextField invoiceNoText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel orderAmountLabel;
    private javax.swing.JLabel orderIDLabel;
    private javax.swing.JLabel paidAmountLabel;
    private javax.swing.JTextField paymentText;
    private javax.swing.JTable paymentsTable;
    private javax.swing.JScrollPane paymentsTablePane;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables

    private void setCalendar(JCalendar calendar) {
        Dimension size = new Dimension(250, 170);
        calendar.setPreferredSize(size);
        calendar.setWeekOfYearVisible(false);
        calendar.setTodayButtonVisible(true);
    }

    private void displayMessage(String message) {
        final String msg = message;

        new Thread() {
            public void run() {
                infoLabel.setText("");
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }

                infoLabel.setText(msg);
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }
                infoLabel.setText("");
                try {
                    sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }

                infoLabel.setText(msg);

                try {
                    sleep(5000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
                }

                infoLabel.setText("");
            }
        }.start();
    }

    private void clearAndSet(boolean b) {
        setEditPanel(b);
        clearEditPanel();
    }

    private void setEditPanel(boolean b) {
        idLabel.setEnabled(b);
        jLabel6.setEnabled(b);
        jLabel7.setEnabled(b);
        jLabel8.setEnabled(b);
        jLabel9.setEnabled(b);

        dateText.setEnabled(b);
        paymentText.setEnabled(b);
        invoiceNoText.setEnabled(b);
        cashRadio.setEnabled(b);
        chequeRadio.setEnabled(b);

        saveButton.setEnabled(b);
        cancelButton.setEnabled(b);
    }

    private void clearEditPanel() {
        idLabel.setText("ID");
        dateText.setDate(null);
        paymentText.setText("");
        invoiceNoText.setText("");
        cashRadio.setSelected(false);
        chequeRadio.setSelected(false);
    }

    private void setDetails() {
        orderIDLabel.setText(orderID);
        customerIDLabel.setText(customerID);
        String am = String.format("%.2f", amount);
        orderAmountLabel.setText(am);
        setPaymentsTable();
        String paidAm = String.format("%.2f", paidAmount);
        paidAmountLabel.setText(paidAm);
        String arr = String.format("%.2f", arries);
        arriesLabel.setText(arr);
    }

    private void setPaymentsTable() {
        tableModel.setRowCount(0);
        ArrayList<Payment> paymemtsList = null;
        paymentController = new CustomerPaymentController();

        try {
            paymemtsList = paymentController.getPayments(orderID);
        } catch (SQLException ex) {
            Logger.getLogger(Payments.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Payments.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = 0; i < paymemtsList.size(); i++) {
            Payment p = paymemtsList.get(i);
            Object[] row = {p.getPaymentId(), p.getDate(), p.getPayment(), p.getInvoiceNo(), p.getMethod()};
            tableModel.addRow(row);

            if (i == (paymemtsList.size() - 1)) {
                paidAmount = p.getPaidAmount();
                arries = amount - paidAmount;
            }
        }
    }

    private void setEditPanelDetails(int i) {
        String meth;

        if (i == -1) {
            String lastID = null;

            paymentController = new CustomerPaymentController();

            try {
                lastID = paymentController.getLastID();
            } catch (SQLException ex) {
            } catch (ClassNotFoundException ex) {
            }

            idLabel.setText(new Extra().getNextID(lastID));
        } else {

            idLabel.setText((String) paymentsTable.getValueAt(i, 0));
            String date = (String) paymentsTable.getValueAt(i, 1);
            try {
                dateText.setDate(dateFormat.parse(date));
            } catch (ParseException ex) {
                //
            }
            paymentText.setText(paymentsTable.getValueAt(i, 2) + "");
            invoiceNoText.setText((String) paymentsTable.getValueAt(i, 3));
            meth = (String) paymentsTable.getValueAt(i, 4);
            if (meth.equals("cash")) {
                cashRadio.setSelected(true);
                paymentMethod = "cash";
            } else if (meth.equals("cheque")) {
                chequeRadio.setSelected(true);
                paymentMethod = "cheque";
            }
        }
    }

    private Payment setPayment() {
        String id, date = null, invoiceNo, method = null;
        Date d;
        double payment = 0, pAmount = 0;

        id = idLabel.getText();
        d = dateText.getDate();
        if (d != null) {
            dateFlag = true;
            date = dateFormat.format(d);
        }
        if (!paymentText.getText().equals("")) {
            payment = Double.parseDouble(paymentText.getText());
            if (mode == 1) {
                pAmount = paidAmount + payment;
                if (payment < arries || payment == arries) {
                    paymentFlag = true;
                }
            } else if (mode == 2) {
                double prevPayment = (double) paymentsTable.getValueAt(selectedRow, 2);
                pAmount = paidAmount - prevPayment + payment;
                if (pAmount < amount || pAmount == amount) {
                    paymentFlag = true;
                }
            }
        }
        invoiceNo = invoiceNoText.getText();
        if (cashRadio.isSelected()) {
            methodFlag = true;
            method = "cash";
        } else if (chequeRadio.isSelected()) {
            methodFlag = true;
            method = "cheque";
        }

        Payment p = new Payment(id, orderID, date, payment, pAmount, invoiceNo, method, "");
        //
        //
        //
        return p;
    }

    private Payment setChequeID(Payment p) {
        ArrayList<Payment> paymentList = null;

        paymentController = new CustomerPaymentController();

        try {
            paymentList = paymentController.searchPayments(p.getPaymentId(), "paymentId");
        } catch (SQLException ex) {
            Logger.getLogger(Payments.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Payments.class.getName()).log(Level.SEVERE, null, ex);
        }

        Payment payment = paymentList.get(0);

        p.setChequeID(payment.getChequeID());

        return p;
    }
}
