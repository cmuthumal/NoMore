/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.toedter.calendar.JCalendar;
import controller.ItemController;
import extra.Extra;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import static java.lang.Thread.sleep;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import model.Item;

/**
 *
 * @author CM <2222cm@gmail.com>
 */
public class Items extends javax.swing.JDialog {

    private ItemController itemController;
    private DefaultTableModel tableModel;
    private SimpleDateFormat dateFormat;
    private ArrayList<Item> itemsList;
    private int mode;
    private boolean descriptionFlag, unitPriceFlag, discountFlag, qtyOnHandFlag, addedDateFlag;
    private String lastID = "";

    /**
     * Creates new form EmployeesForm
     */
    public Items(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        initComponents();
        setLocationRelativeTo(null);

        itemsTable.getTableHeader().setReorderingAllowed(false);
        tableModel = (DefaultTableModel) itemsTable.getModel();
        dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        itemsList = new ArrayList<>();

        setFieldsPanel(false);
        setCalendar(addedDateText.getJCalendar());
        viewAllButtonActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        homeButton = new javax.swing.JButton();
        searchPanel = new javax.swing.JPanel();
        searchText = new javax.swing.JTextField();
        searchCombo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        viewAllButton = new javax.swing.JButton();
        tablePane = new javax.swing.JScrollPane();
        itemsTable = new javax.swing.JTable();
        fieldsPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        codeLabel = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        discountLabel = new javax.swing.JLabel();
        qtyOnHandLabel = new javax.swing.JLabel();
        addedDateLabel = new javax.swing.JLabel();
        noteLabel = new javax.swing.JLabel();
        descriptionText = new javax.swing.JTextField();
        discountText = new javax.swing.JTextField();
        qtyOnHandText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        notesText = new javax.swing.JTextArea();
        cancelButton = new javax.swing.JButton();
        unitPriceLabel = new javax.swing.JLabel();
        unitPriceText = new javax.swing.JTextField();
        addedDateText = new com.toedter.calendar.JDateChooser();
        fieldsInfoLabel = new javax.swing.JLabel();
        qtyOnOrdersLabel = new javax.swing.JLabel();
        qtyOnOrdersText = new javax.swing.JTextField();
        deleteButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        mainInfoLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Items");
        setResizable(false);

        homeButton.setText("Home");
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });

        searchPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(150, 150, 150), 1, true));

        searchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextActionPerformed(evt);
            }
        });

        searchCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Code", "Description" }));
        searchCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchComboActionPerformed(evt);
            }
        });

        jLabel1.setText("Search by");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        viewAllButton.setText("View All");
        viewAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 304, Short.MAX_VALUE)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(searchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton)
                    .addComponent(viewAllButton))
                .addContainerGap())
        );

        tablePane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        itemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Description", "Unit Price", "Discount", "Amount", "Qty on Hand", "Added Date", "Note"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemsTableMouseClicked(evt);
            }
        });
        tablePane.setViewportView(itemsTable);
        itemsTable.getColumnModel().getColumn(0).setMinWidth(60);
        itemsTable.getColumnModel().getColumn(0).setMaxWidth(60);
        itemsTable.getColumnModel().getColumn(2).setMinWidth(75);
        itemsTable.getColumnModel().getColumn(2).setMaxWidth(75);
        itemsTable.getColumnModel().getColumn(3).setMinWidth(70);
        itemsTable.getColumnModel().getColumn(3).setMaxWidth(70);
        itemsTable.getColumnModel().getColumn(4).setMinWidth(65);
        itemsTable.getColumnModel().getColumn(4).setMaxWidth(65);
        itemsTable.getColumnModel().getColumn(5).setMinWidth(95);
        itemsTable.getColumnModel().getColumn(5).setMaxWidth(95);
        itemsTable.getColumnModel().getColumn(6).setMinWidth(90);
        itemsTable.getColumnModel().getColumn(6).setMaxWidth(90);

        fieldsPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(150, 150, 150), 1, true));

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        codeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        codeLabel.setText("Code");

        descriptionLabel.setText("Description");

        discountLabel.setText("Discount");

        qtyOnHandLabel.setText("Qty on Hand");

        addedDateLabel.setText("Added Date");
        addedDateLabel.setPreferredSize(new java.awt.Dimension(84, 27));

        noteLabel.setText("Note");

        descriptionText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descriptionTextActionPerformed(evt);
            }
        });

        discountText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discountTextActionPerformed(evt);
            }
        });
        discountText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                discountTextKeyTyped(evt);
            }
        });

        qtyOnHandText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyOnHandTextActionPerformed(evt);
            }
        });
        qtyOnHandText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                qtyOnHandTextKeyTyped(evt);
            }
        });

        notesText.setColumns(20);
        notesText.setRows(5);
        jScrollPane1.setViewportView(notesText);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        unitPriceLabel.setText("Unit Price");

        unitPriceText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitPriceTextActionPerformed(evt);
            }
        });
        unitPriceText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                unitPriceTextKeyTyped(evt);
            }
        });

        addedDateText.setDateFormatString("yyyy-MM-dd");
        addedDateText.setIcon(new ImageIcon("./src/icons/calendar-icon.png"));
        addedDateText.setMaximumSize(new java.awt.Dimension(2147483, 2147483));
        addedDateText.setMinSelectableDate(new java.util.Date(-62135785703000L));

        fieldsInfoLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        fieldsInfoLabel.setForeground(new java.awt.Color(253, 47, 47));
        fieldsInfoLabel.setText(" ");
        fieldsInfoLabel.setPreferredSize(new java.awt.Dimension(400, 27));

        qtyOnOrdersLabel.setText("Qty on Orders");

        qtyOnOrdersText.setEditable(false);

        javax.swing.GroupLayout fieldsPanelLayout = new javax.swing.GroupLayout(fieldsPanel);
        fieldsPanel.setLayout(fieldsPanelLayout);
        fieldsPanelLayout.setHorizontalGroup(
            fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fieldsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fieldsPanelLayout.createSequentialGroup()
                        .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(fieldsPanelLayout.createSequentialGroup()
                                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(descriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(unitPriceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(qtyOnHandLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                                    .addComponent(discountLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(4, 4, 4)
                                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(descriptionText)
                                    .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(discountText, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                                        .addComponent(qtyOnHandText, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(unitPriceText)))
                            .addGroup(fieldsPanelLayout.createSequentialGroup()
                                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addedDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(qtyOnOrdersLabel))
                                .addGap(4, 4, 4)
                                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addedDateText, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                                    .addComponent(qtyOnOrdersText))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                        .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(noteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fieldsPanelLayout.createSequentialGroup()
                        .addComponent(fieldsInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fieldsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(codeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        fieldsPanelLayout.setVerticalGroup(
            fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fieldsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(codeLabel)
                .addGap(18, 18, 18)
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descriptionLabel)
                    .addComponent(descriptionText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noteLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(fieldsPanelLayout.createSequentialGroup()
                        .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(unitPriceLabel)
                            .addComponent(unitPriceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(discountLabel)
                            .addComponent(discountText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(qtyOnHandLabel)
                            .addComponent(qtyOnHandText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addedDateText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addedDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qtyOnOrdersLabel)
                    .addComponent(qtyOnOrdersText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton)
                    .addComponent(fieldsInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        deleteButton.setText("Delete");
        deleteButton.setPreferredSize(new java.awt.Dimension(90, 29));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        newButton.setText("New");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        mainInfoLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        mainInfoLabel.setText(" ");
        mainInfoLabel.setPreferredSize(new java.awt.Dimension(400, 25));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(mainInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(newButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(homeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tablePane, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fieldsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fieldsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(homeButton)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editButton)
                    .addComponent(newButton)
                    .addComponent(mainInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_homeButtonActionPerformed

    private void viewAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllButtonActionPerformed
        clearFieldsPanel();
        setFieldsPanel(false);
        itemController = new ItemController();

        try {
            itemsList = itemController.getAllItems();
        } catch (SQLException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
        }
        setTable();
        searchText.setText("");
        searchCombo.setSelectedIndex(0);
    }//GEN-LAST:event_viewAllButtonActionPerformed

    private void searchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextActionPerformed
        clearFieldsPanel();
        setFieldsPanel(false);
        String key = "", type = "";
        if (!searchText.getText().equals("")) {
            key = searchText.getText();
            int sel = searchCombo.getSelectedIndex();
            if (sel == 0) {
                type = "code";
            } else if (sel == 1) {
                type = "description";
            }

            try {
                itemsList = itemController.searchItem(key, type);
                setTable();
            } catch (SQLException ex) {
                Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            viewAllButtonActionPerformed(null);
        }
    }//GEN-LAST:event_searchTextActionPerformed

    private void searchComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchComboActionPerformed
        searchText.setText("");
    }//GEN-LAST:event_searchComboActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchTextActionPerformed(null);
    }//GEN-LAST:event_searchButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        clearFieldsPanel();
        setFieldsPanel(false);
        mode = 0;
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void itemsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemsTableMouseClicked
        mode = 0;
        if (evt.getClickCount() == 1) {
            clearFieldsPanel();
            setFieldsPanel(false);
        } else if (evt.getClickCount() == 2) {
            mode = 1;
            setFieldsPanel(true);
            JTable target = (JTable) evt.getSource();
            setFieldValues(target.getSelectedRow());
        }
    }//GEN-LAST:event_itemsTableMouseClicked

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        clearFieldsPanel();
        setFieldsPanel(false);
        mode = 1;
        if (itemsTable.getSelectedRow() != -1) {
            setFieldsPanel(true);
            setFieldValues(itemsTable.getSelectedRow());
            descriptionText.requestFocus();
        } else {
            showMainMessage("Select an item first");
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        mode = 2;
        viewAllButtonActionPerformed(null);
        String newID = new Extra().getNextID(lastID);

        clearFieldsPanel();
        setFieldsPanel(true);
        codeLabel.setText(newID);
        descriptionText.requestFocus();
    }//GEN-LAST:event_newButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        Item it = setItem();

        if (!descriptionFlag) {
            showFieldsPanelMessage("Enter item description");
            descriptionText.requestFocus();
        } else if (!unitPriceFlag) {
            showFieldsPanelMessage("Enter unit price");
            unitPriceText.requestFocus();
        } else if (!discountFlag) {
            showFieldsPanelMessage("Enter discount value");
            discountText.requestFocus();
        } else if (!qtyOnHandFlag) {
            showFieldsPanelMessage("Enter available quantity");
            qtyOnHandText.requestFocus();
        } else if (!addedDateFlag) {
            showFieldsPanelMessage("Enter added date");
            addedDateText.requestFocus();
        } else {
            itemController = new ItemController();

            if (mode == 1) {
                boolean updated = false;
                try {
                    updated = itemController.updateItem(it);
                } catch (SQLException ex) {
                    Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (updated) {
                    showMainMessage("Item updated successfully");
                    clearFieldsPanel();
                    setFieldsPanel(false);
                    viewAllButtonActionPerformed(null);
                } else {
                    showMainMessage("Item was not updated");
                }
            } else if (mode == 2) {
                boolean added = false;
                try {
                    added = itemController.addItem(it);
                } catch (SQLException ex) {
                    Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (added) {
                    showMainMessage("New item added successfully");
                    clearFieldsPanel();
                    setFieldsPanel(false);
                    viewAllButtonActionPerformed(null);
                } else {
                    showMainMessage("New item was not added");
                }
            }
        }
        setFlags(false);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void descriptionTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descriptionTextActionPerformed
        unitPriceText.requestFocus();
    }//GEN-LAST:event_descriptionTextActionPerformed

    private void unitPriceTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitPriceTextActionPerformed
        discountText.requestFocus();
    }//GEN-LAST:event_unitPriceTextActionPerformed

    private void discountTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discountTextActionPerformed
        qtyOnHandText.requestFocus();
    }//GEN-LAST:event_discountTextActionPerformed

    private void qtyOnHandTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyOnHandTextActionPerformed
        saveButton.requestFocus();
    }//GEN-LAST:event_qtyOnHandTextActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        clearFieldsPanel();
        setFieldsPanel(false);
        boolean deleted = false;
        if (itemsTable.getSelectedRow() != -1) {
            int confirmation = JOptionPane.showConfirmDialog(null, "Delete selected item?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (confirmation == 0) {
                itemController = new ItemController();
                String id = (String) itemsTable.getValueAt(itemsTable.getSelectedRow(), 0);

                try {
                    deleted = itemController.deleteItem(id);
                } catch (SQLException ex) {
                    Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
                }

                if (deleted) {
                    showMainMessage("'" + id + "' has been deleted");
                    viewAllButtonActionPerformed(null);
                } else {
                    showMainMessage("Item has not been deleted");
                }
            }
        } else {
            showMainMessage("Select an item first");
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void unitPriceTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_unitPriceTextKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || (c == KeyEvent.VK_PERIOD))) {
            evt.consume();
        }
    }//GEN-LAST:event_unitPriceTextKeyTyped

    private void discountTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_discountTextKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c) || (c == KeyEvent.VK_PERIOD))) {
            evt.consume();
        }
    }//GEN-LAST:event_discountTextKeyTyped

    private void qtyOnHandTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyOnHandTextKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_qtyOnHandTextKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Items dialog = new Items(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addedDateLabel;
    private com.toedter.calendar.JDateChooser addedDateText;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel codeLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextField descriptionText;
    private javax.swing.JLabel discountLabel;
    private javax.swing.JTextField discountText;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel fieldsInfoLabel;
    private javax.swing.JPanel fieldsPanel;
    private javax.swing.JButton homeButton;
    private javax.swing.JTable itemsTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel mainInfoLabel;
    private javax.swing.JButton newButton;
    private javax.swing.JLabel noteLabel;
    private javax.swing.JTextArea notesText;
    private javax.swing.JLabel qtyOnHandLabel;
    private javax.swing.JTextField qtyOnHandText;
    private javax.swing.JLabel qtyOnOrdersLabel;
    private javax.swing.JTextField qtyOnOrdersText;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox searchCombo;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField searchText;
    private javax.swing.JScrollPane tablePane;
    private javax.swing.JLabel unitPriceLabel;
    private javax.swing.JTextField unitPriceText;
    private javax.swing.JButton viewAllButton;
    // End of variables declaration//GEN-END:variables

    private void setCalendar(JCalendar calendar) {
        Dimension size = new Dimension(250, 170);
        calendar.setPreferredSize(size);
        calendar.setWeekOfYearVisible(false);
        calendar.setTodayButtonVisible(true);
    }

    private void setTable() {
        tableModel.setRowCount(0);
        if (!itemsList.isEmpty()) {
            for (int i = 0; i < itemsList.size(); i++) {
                Item itm = itemsList.get(i);
                lastID = itm.getCode();
                double amount = itm.getUnitPrice() - itm.getUnitPrice() * itm.getDiscount() / 100;
                Object[] row = {itm.getCode(), itm.getDescription(), itm.getUnitPrice(), itm.getDiscount(), amount, itm.getQtyOnHand(), itm.getAddedDate(), itm.getNotes()};
                tableModel.addRow(row);
            }
        } else {
            showMainMessage("No items in database");
            lastID = new Extra().getFirstID("item");
        }
    }

    private void setFieldsPanel(boolean b) {
        codeLabel.setEnabled(b);
        descriptionLabel.setEnabled(b);
        unitPriceLabel.setEnabled(b);
        discountLabel.setEnabled(b);
        qtyOnHandLabel.setEnabled(b);
        addedDateLabel.setEnabled(b);
        qtyOnOrdersLabel.setEnabled(b);
        noteLabel.setEnabled(b);

        descriptionText.setEnabled(b);
        unitPriceText.setEnabled(b);
        discountText.setEnabled(b);
        qtyOnHandText.setEnabled(b);
        addedDateText.setEnabled(b);
        qtyOnOrdersText.setEnabled(b);
        notesText.setEnabled(b);
        saveButton.setEnabled(b);
        cancelButton.setEnabled(b);
    }

    private void clearFieldsPanel() {
        codeLabel.setText("Code");
        descriptionText.setText("");
        unitPriceText.setText("");
        discountText.setText("");
        qtyOnHandText.setText("");
        addedDateText.setDate(null);
        notesText.setText("");
    }

    private void setFieldValues(int selectedRow) {
        codeLabel.setText((String) itemsTable.getValueAt(selectedRow, 0));
        descriptionText.setText((String) itemsTable.getValueAt(selectedRow, 1));
        unitPriceText.setText(itemsTable.getValueAt(selectedRow, 2) + "");
        discountText.setText(itemsTable.getValueAt(selectedRow, 3) + "");
        qtyOnHandText.setText(itemsTable.getValueAt(selectedRow, 5) + "");

        try {
            Date date = dateFormat.parse((String) itemsTable.getValueAt(selectedRow, 6));
            addedDateText.setDate(date);

        } catch (ParseException ex) {
            Logger.getLogger(Items.class.getName()).log(Level.SEVERE, null, ex);
        }

        notesText.setText((String) itemsTable.getValueAt(selectedRow, 7));

        setQtyOnOrders();
    }

    private void setQtyOnOrders() {
    }

    private Item setItem() {
        String description = "", addedDate = "", note = "";
        double unitPrice = 0, discount = 0;
        int qtyOnHand = 0;
        Item it = null;

        if (!descriptionText.getText().equals("")) {
            descriptionFlag = true;
            description = descriptionText.getText();
        }
        if (!unitPriceText.getText().equals("")) {
            unitPriceFlag = true;
            unitPrice = Double.parseDouble(unitPriceText.getText());
        }
        if (!discountText.getText().equals("")) {
            discountFlag = true;
            discount = Double.parseDouble(discountText.getText());
        }
        if (!qtyOnHandText.getText().equals("")) {
            qtyOnHandFlag = true;
            qtyOnHand = Integer.parseInt(qtyOnHandText.getText());
        }
        if (addedDateText.getDate() != null) {
            addedDateFlag = true;
            Date d = addedDateText.getDate();
            addedDate = dateFormat.format(d);
        }
        if (!notesText.getText().equals("")) {
            note = notesText.getText();
        }

        it = new Item(codeLabel.getText(), description, unitPrice, discount, qtyOnHand, addedDate, note);

        return it;
    }

    private void setFlags(boolean b) {
        descriptionFlag = b;
        unitPriceFlag = b;
        discountFlag = b;
        qtyOnHandFlag = b;
        addedDateFlag = b;
    }

    private void showMainMessage(String message) {
        final String msg = message;

        new Thread() {
            public void run() {
                mainInfoLabel.setText("");
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }

                mainInfoLabel.setText(msg);
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }
                mainInfoLabel.setText("");
                try {
                    sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }

                mainInfoLabel.setText(msg);

                try {
                    sleep(5000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
                }

                mainInfoLabel.setText("");
            }
        }.start();
    }

    private void showFieldsPanelMessage(String message) {
        final String msg = message;

        new Thread() {
            public void run() {
                fieldsInfoLabel.setText("");
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }

                fieldsInfoLabel.setText(msg);
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }
                fieldsInfoLabel.setText("");
                try {
                    sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }

                fieldsInfoLabel.setText(msg);

                try {
                    sleep(5000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
                }

                fieldsInfoLabel.setText("");
            }
        }.start();
    }
}
