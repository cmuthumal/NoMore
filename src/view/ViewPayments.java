/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.CustomerPaymentController;
import controller.SupplierPaymentController;
import static java.lang.Thread.sleep;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Payment;

/**
 *
 * @author CM <2222cm@gmail.com>
 */
public class ViewPayments extends javax.swing.JDialog {

    private DefaultTableModel custTableModel, supTableModel;
    private CustomerPaymentController customerPaymentController;
    private SupplierPaymentController supplierPaymentController;
    private ArrayList<Payment> custPaymentList, supPaymentList;
    private String keyCust, keySup, typeCust = "orderId", typeSup = "orderId";
    private ButtonGroup buttonGroup1, buttonGroup2;
    private Object[][] custArray, supArray;
    private int noOfCustRecords, noOfSupRecords;

    /**
     * Creates new form ViewPayments
     */
    public ViewPayments(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);

        customerTable.getTableHeader().setReorderingAllowed(false);
        custTableModel = (DefaultTableModel) customerTable.getModel();
        supTableModel = (DefaultTableModel) supplierTable.getModel();

        buttonGroup1 = new ButtonGroup();
        buttonGroup1.add(chequeRadioCust);
        buttonGroup1.add(cashRadioCust);
        buttonGroup1.add(allRadioCust);
        buttonGroup2 = new ButtonGroup();
        buttonGroup2.add(chequeRadioSup);
        buttonGroup2.add(cashRadioSup);
        buttonGroup2.add(allRadioSup);

        setCustTable();
        setSupTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        homeButton = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();
        customerPanel = new javax.swing.JPanel();
        searchPanelCust = new javax.swing.JPanel();
        searchComboCustomer = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        keyTextCustomer = new javax.swing.JTextField();
        searchButtonCustomer = new javax.swing.JButton();
        viewAllButtonCustomer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        customerTable = new javax.swing.JTable();
        deleteButtonCust = new javax.swing.JButton();
        infoLabelCust = new javax.swing.JLabel();
        filterPanelCust = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        chequeRadioCust = new javax.swing.JRadioButton();
        allRadioCust = new javax.swing.JRadioButton();
        cashRadioCust = new javax.swing.JRadioButton();
        supplierPanel = new javax.swing.JPanel();
        searchPanelSup = new javax.swing.JPanel();
        searchComboSupplier = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        keyTextSupplier = new javax.swing.JTextField();
        searchButtonSupplier = new javax.swing.JButton();
        viewAllButtonSupplier = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        supplierTable = new javax.swing.JTable();
        deleteButtonSup = new javax.swing.JButton();
        infoLabelSup = new javax.swing.JLabel();
        filterPanelSup = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        chequeRadioSup = new javax.swing.JRadioButton();
        allRadioSup = new javax.swing.JRadioButton();
        cashRadioSup = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Payments");

        homeButton.setText("Home");
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });

        searchPanelCust.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(200, 200, 200), 1, true));

        searchComboCustomer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Order ID", "Payment ID", "Invoice No" }));
        searchComboCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchComboCustomerActionPerformed(evt);
            }
        });

        jLabel2.setText("Search by");

        keyTextCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyTextCustomerActionPerformed(evt);
            }
        });

        searchButtonCustomer.setText("Search");

        viewAllButtonCustomer.setText("View All");
        viewAllButtonCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllButtonCustomerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelCustLayout = new javax.swing.GroupLayout(searchPanelCust);
        searchPanelCust.setLayout(searchPanelCustLayout);
        searchPanelCustLayout.setHorizontalGroup(
            searchPanelCustLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelCustLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(keyTextCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchComboCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                .addComponent(searchButtonCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewAllButtonCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        searchPanelCustLayout.setVerticalGroup(
            searchPanelCustLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelCustLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelCustLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyTextCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(searchComboCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewAllButtonCustomer)
                    .addComponent(searchButtonCustomer))
                .addContainerGap())
        );

        customerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Order", "Date", "Payment", "Paid Amount", "Invoice No", "Method"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(customerTable);
        customerTable.getColumnModel().getColumn(0).setMinWidth(60);
        customerTable.getColumnModel().getColumn(0).setMaxWidth(60);
        customerTable.getColumnModel().getColumn(1).setMinWidth(60);
        customerTable.getColumnModel().getColumn(1).setMaxWidth(60);
        customerTable.getColumnModel().getColumn(2).setMinWidth(85);
        customerTable.getColumnModel().getColumn(2).setMaxWidth(85);
        customerTable.getColumnModel().getColumn(3).setMinWidth(95);
        customerTable.getColumnModel().getColumn(3).setMaxWidth(95);
        customerTable.getColumnModel().getColumn(4).setMinWidth(95);
        customerTable.getColumnModel().getColumn(4).setMaxWidth(95);
        customerTable.getColumnModel().getColumn(6).setMinWidth(70);
        customerTable.getColumnModel().getColumn(6).setMaxWidth(70);

        deleteButtonCust.setText("Delete");
        deleteButtonCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonCustActionPerformed(evt);
            }
        });

        infoLabelCust.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        infoLabelCust.setText(" ");

        filterPanelCust.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(200, 200, 200), 1, true));

        jLabel4.setText("Filter by payment method :");

        chequeRadioCust.setText("Cheque");
        chequeRadioCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chequeRadioCustActionPerformed(evt);
            }
        });

        allRadioCust.setText("All");
        allRadioCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allRadioCustActionPerformed(evt);
            }
        });

        cashRadioCust.setText("Cash");
        cashRadioCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashRadioCustActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filterPanelCustLayout = new javax.swing.GroupLayout(filterPanelCust);
        filterPanelCust.setLayout(filterPanelCustLayout);
        filterPanelCustLayout.setHorizontalGroup(
            filterPanelCustLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelCustLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(chequeRadioCust)
                .addGap(18, 18, 18)
                .addComponent(cashRadioCust)
                .addGap(18, 18, 18)
                .addComponent(allRadioCust)
                .addContainerGap())
        );
        filterPanelCustLayout.setVerticalGroup(
            filterPanelCustLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelCustLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanelCustLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(chequeRadioCust)
                    .addComponent(cashRadioCust)
                    .addComponent(allRadioCust))
                .addContainerGap())
        );

        javax.swing.GroupLayout customerPanelLayout = new javax.swing.GroupLayout(customerPanel);
        customerPanel.setLayout(customerPanelLayout);
        customerPanelLayout.setHorizontalGroup(
            customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchPanelCust, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerPanelLayout.createSequentialGroup()
                        .addComponent(infoLabelCust, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteButtonCust, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(customerPanelLayout.createSequentialGroup()
                        .addComponent(filterPanelCust, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        customerPanelLayout.setVerticalGroup(
            customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchPanelCust, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterPanelCust, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(infoLabelCust, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButtonCust))
                .addContainerGap())
        );

        tabbedPane.addTab("Customer Payments", customerPanel);

        searchPanelSup.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(200, 200, 200), 1, true));

        searchComboSupplier.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Order ID", "Payment ID", "Invoice No" }));
        searchComboSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchComboSupplierActionPerformed(evt);
            }
        });

        jLabel1.setText("Search by");

        keyTextSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyTextSupplierActionPerformed(evt);
            }
        });

        searchButtonSupplier.setText("Search");

        viewAllButtonSupplier.setText("View All");
        viewAllButtonSupplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllButtonSupplierActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelSupLayout = new javax.swing.GroupLayout(searchPanelSup);
        searchPanelSup.setLayout(searchPanelSupLayout);
        searchPanelSupLayout.setHorizontalGroup(
            searchPanelSupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelSupLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(keyTextSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchComboSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                .addComponent(searchButtonSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewAllButtonSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        searchPanelSupLayout.setVerticalGroup(
            searchPanelSupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelSupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelSupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keyTextSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(searchComboSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewAllButtonSupplier)
                    .addComponent(searchButtonSupplier))
                .addContainerGap())
        );

        supplierTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Order", "Date", "Payment", "Paid Amount", "Invoice No", "Method"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(supplierTable);
        supplierTable.getColumnModel().getColumn(0).setMinWidth(60);
        supplierTable.getColumnModel().getColumn(0).setMaxWidth(60);
        supplierTable.getColumnModel().getColumn(1).setMinWidth(60);
        supplierTable.getColumnModel().getColumn(1).setMaxWidth(60);
        supplierTable.getColumnModel().getColumn(2).setMinWidth(85);
        supplierTable.getColumnModel().getColumn(2).setMaxWidth(85);
        supplierTable.getColumnModel().getColumn(3).setMinWidth(95);
        supplierTable.getColumnModel().getColumn(3).setMaxWidth(95);
        supplierTable.getColumnModel().getColumn(4).setMinWidth(95);
        supplierTable.getColumnModel().getColumn(4).setMaxWidth(95);
        supplierTable.getColumnModel().getColumn(6).setMinWidth(70);
        supplierTable.getColumnModel().getColumn(6).setMaxWidth(70);

        deleteButtonSup.setText("Delete");
        deleteButtonSup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonSupActionPerformed(evt);
            }
        });

        infoLabelSup.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        infoLabelSup.setText(" ");

        filterPanelSup.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(200, 200, 200), 1, true));

        jLabel3.setText("Filter by payment method :");

        chequeRadioSup.setText("Cheque");
        chequeRadioSup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chequeRadioSupActionPerformed(evt);
            }
        });

        allRadioSup.setText("All");
        allRadioSup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allRadioSupActionPerformed(evt);
            }
        });

        cashRadioSup.setText("Cash");
        cashRadioSup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashRadioSupActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout filterPanelSupLayout = new javax.swing.GroupLayout(filterPanelSup);
        filterPanelSup.setLayout(filterPanelSupLayout);
        filterPanelSupLayout.setHorizontalGroup(
            filterPanelSupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelSupLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(chequeRadioSup)
                .addGap(18, 18, 18)
                .addComponent(cashRadioSup)
                .addGap(18, 18, 18)
                .addComponent(allRadioSup)
                .addContainerGap())
        );
        filterPanelSupLayout.setVerticalGroup(
            filterPanelSupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelSupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanelSupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(chequeRadioSup)
                    .addComponent(cashRadioSup)
                    .addComponent(allRadioSup))
                .addContainerGap())
        );

        javax.swing.GroupLayout supplierPanelLayout = new javax.swing.GroupLayout(supplierPanel);
        supplierPanel.setLayout(supplierPanelLayout);
        supplierPanelLayout.setHorizontalGroup(
            supplierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(supplierPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(supplierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchPanelSup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, supplierPanelLayout.createSequentialGroup()
                        .addComponent(infoLabelSup, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteButtonSup, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(supplierPanelLayout.createSequentialGroup()
                        .addComponent(filterPanelSup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        supplierPanelLayout.setVerticalGroup(
            supplierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(supplierPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchPanelSup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterPanelSup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(supplierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(infoLabelSup, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButtonSup))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Supplier Payments", supplierPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(homeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(tabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(homeButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_homeButtonActionPerformed

    private void viewAllButtonCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllButtonCustomerActionPerformed
        keyTextCustomer.setText("");
        searchComboCustomer.setSelectedIndex(0);
        setCustTable();
    }//GEN-LAST:event_viewAllButtonCustomerActionPerformed

    private void viewAllButtonSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllButtonSupplierActionPerformed
        keyTextSupplier.setText("");
        searchComboSupplier.setSelectedIndex(0);
        setSupTable();
    }//GEN-LAST:event_viewAllButtonSupplierActionPerformed

    private void searchComboCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchComboCustomerActionPerformed
        int ind = searchComboCustomer.getSelectedIndex();
        if (ind == 0) {
            typeCust = "orderId";
        } else if (ind == 1) {
            typeCust = "paymentId";
        } else if (ind == 2) {
            typeCust = "invoiceNo";
        }
    }//GEN-LAST:event_searchComboCustomerActionPerformed

    private void searchComboSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchComboSupplierActionPerformed
        int ind = searchComboSupplier.getSelectedIndex();
        if (ind == 0) {
            typeSup = "orderId";
        } else if (ind == 1) {
            typeSup = "paymentId";
        } else if (ind == 2) {
            typeSup = "invoiceNo";
        }
    }//GEN-LAST:event_searchComboSupplierActionPerformed

    private void keyTextCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyTextCustomerActionPerformed
        keyCust = keyTextCustomer.getText();
        if (!keyCust.equals("")) {
            searchCustomers();
        } else {
            viewAllButtonCustomerActionPerformed(null);
        }
    }//GEN-LAST:event_keyTextCustomerActionPerformed

    private void keyTextSupplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyTextSupplierActionPerformed
        keySup = keyTextSupplier.getText();
        if (!keySup.equals("")) {
            searchSuppliers();
        } else {
            viewAllButtonSupplierActionPerformed(null);
        }
    }//GEN-LAST:event_keyTextSupplierActionPerformed

    private void chequeRadioCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chequeRadioCustActionPerformed
        custTableModel.setRowCount(0);
        for (int i = 0; i < noOfCustRecords; i++) {
            if (custArray[i][6].equals("cheque")) {
                custTableModel.addRow(custArray[i]);
            }
        }
    }//GEN-LAST:event_chequeRadioCustActionPerformed

    private void cashRadioCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cashRadioCustActionPerformed
        custTableModel.setRowCount(0);
        for (int i = 0; i < noOfCustRecords; i++) {
            if (custArray[i][6].equals("cash")) {
                custTableModel.addRow(custArray[i]);
            }
        }
    }//GEN-LAST:event_cashRadioCustActionPerformed

    private void allRadioCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allRadioCustActionPerformed
        custTableModel.setRowCount(0);
        for (int i = 0; i < noOfCustRecords; i++) {
            custTableModel.addRow(custArray[i]);
        }
    }//GEN-LAST:event_allRadioCustActionPerformed

    private void chequeRadioSupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chequeRadioSupActionPerformed
        supTableModel.setRowCount(0);
        for (int i = 0; i < noOfSupRecords; i++) {
            if (supArray[i][6].equals("cheque")) {
                supTableModel.addRow(supArray[i]);
            }
        }
    }//GEN-LAST:event_chequeRadioSupActionPerformed

    private void cashRadioSupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cashRadioSupActionPerformed
        supTableModel.setRowCount(0);
        for (int i = 0; i < noOfSupRecords; i++) {
            if (supArray[i][6].equals("cash")) {
                supTableModel.addRow(supArray[i]);
            }
        }
    }//GEN-LAST:event_cashRadioSupActionPerformed

    private void allRadioSupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allRadioSupActionPerformed
        supTableModel.setRowCount(0);
        for (int i = 0; i < noOfSupRecords; i++) {
            supTableModel.addRow(supArray[i]);
        }
    }//GEN-LAST:event_allRadioSupActionPerformed

    private void deleteButtonCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonCustActionPerformed
        int row = customerTable.getSelectedRow();
        if (row != -1) {
            int conf = JOptionPane.showConfirmDialog(this, "Delete selected record?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (conf == 0) {
                boolean deleted = false;
                customerPaymentController = new CustomerPaymentController();

                try {
                    deleted = customerPaymentController.deletePayment((String) customerTable.getValueAt(row, 0));
                } catch (SQLException ex) {
                    Logger.getLogger(ViewPayments.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ViewPayments.class.getName()).log(Level.SEVERE, null, ex);
                }

                if (deleted) {
                    displayCustMessage("Record deleted");
                    setCustTable();
                } else {
                    displayCustMessage("Record was not deleted");
                }
            }
        } else {
            displayCustMessage("Select a record first");
        }
    }//GEN-LAST:event_deleteButtonCustActionPerformed

    private void deleteButtonSupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonSupActionPerformed
        int row = supplierTable.getSelectedRow();
        if (row != -1) {
            int conf = JOptionPane.showConfirmDialog(this, "Delete selected record?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (conf == 0) {
                boolean deleted = false;
                supplierPaymentController = new SupplierPaymentController();

                try {
                    deleted = supplierPaymentController.deletePayment((String) supplierTable.getValueAt(row, 0));
                } catch (SQLException ex) {
                    Logger.getLogger(ViewPayments.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ViewPayments.class.getName()).log(Level.SEVERE, null, ex);
                }

                if (deleted) {
                    displaySupMessage("Record deleted");
                    setSupTable();
                } else {
                    displaySupMessage("Record was not deleted");
                }
            }
        } else {
            displaySupMessage("Select a record first");
        }
    }//GEN-LAST:event_deleteButtonSupActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewPayments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewPayments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewPayments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewPayments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ViewPayments dialog = new ViewPayments(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton allRadioCust;
    private javax.swing.JRadioButton allRadioSup;
    private javax.swing.JRadioButton cashRadioCust;
    private javax.swing.JRadioButton cashRadioSup;
    private javax.swing.JRadioButton chequeRadioCust;
    private javax.swing.JRadioButton chequeRadioSup;
    private javax.swing.JPanel customerPanel;
    private javax.swing.JTable customerTable;
    private javax.swing.JButton deleteButtonCust;
    private javax.swing.JButton deleteButtonSup;
    private javax.swing.JPanel filterPanelCust;
    private javax.swing.JPanel filterPanelSup;
    private javax.swing.JButton homeButton;
    private javax.swing.JLabel infoLabelCust;
    private javax.swing.JLabel infoLabelSup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField keyTextCustomer;
    private javax.swing.JTextField keyTextSupplier;
    private javax.swing.JButton searchButtonCustomer;
    private javax.swing.JButton searchButtonSupplier;
    private javax.swing.JComboBox searchComboCustomer;
    private javax.swing.JComboBox searchComboSupplier;
    private javax.swing.JPanel searchPanelCust;
    private javax.swing.JPanel searchPanelSup;
    private javax.swing.JPanel supplierPanel;
    private javax.swing.JTable supplierTable;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JButton viewAllButtonCustomer;
    private javax.swing.JButton viewAllButtonSupplier;
    // End of variables declaration//GEN-END:variables

    private void displayCustMessage(String message) {
        final String msg = message;

        new Thread() {
            public void run() {
                infoLabelCust.setText("");
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ViewPayments.class.getName()).log(Level.SEVERE, null, ex);
                }

                infoLabelCust.setText(msg);
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ViewPayments.class.getName()).log(Level.SEVERE, null, ex);
                }
                infoLabelCust.setText("");
                try {
                    sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ViewPayments.class.getName()).log(Level.SEVERE, null, ex);
                }

                infoLabelCust.setText(msg);

                try {
                    sleep(5000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ViewPayments.class.getName()).log(Level.SEVERE, null, ex);
                }

                infoLabelCust.setText("");
            }
        }.start();
    }

    private void displaySupMessage(String message) {
        final String msg = message;

        new Thread() {
            public void run() {
                infoLabelSup.setText("");
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ViewPayments.class.getName()).log(Level.SEVERE, null, ex);
                }

                infoLabelSup.setText(msg);
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ViewPayments.class.getName()).log(Level.SEVERE, null, ex);
                }
                infoLabelSup.setText("");
                try {
                    sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ViewPayments.class.getName()).log(Level.SEVERE, null, ex);
                }

                infoLabelSup.setText(msg);

                try {
                    sleep(5000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ViewPayments.class.getName()).log(Level.SEVERE, null, ex);
                }

                infoLabelSup.setText("");
            }
        }.start();
    }

    private void setCustTable() {
        custTableModel.setRowCount(0);
        allRadioCust.setSelected(true);
        customerPaymentController = new CustomerPaymentController();

        try {
           custPaymentList = customerPaymentController.getAllPayments();
        } catch (SQLException ex) {
            Logger.getLogger(ViewPayments.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ViewPayments.class.getName()).log(Level.SEVERE, null, ex);
        }

        noOfCustRecords = custPaymentList.size();

        for (int i = 0; i < noOfCustRecords; i++) {
            Payment p = custPaymentList.get(i);
            Object[] row = {p.getPaymentId(), p.getOrderId(), p.getDate(), p.getPayment(), p.getPaidAmount(), p.getInvoiceNo(), p.getMethod()};
            custTableModel.addRow(row);
        }

        setCustArray();
    }

    private void searchCustomers() {
        custTableModel.setRowCount(0);
        allRadioCust.setSelected(true);
        customerPaymentController = new CustomerPaymentController();

        try {
            custPaymentList = customerPaymentController.searchPayments(keyCust, typeCust);
        } catch (SQLException ex) {
            Logger.getLogger(ViewPayments.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ViewPayments.class.getName()).log(Level.SEVERE, null, ex);
        }

        noOfCustRecords = custPaymentList.size();

        for (int i = 0; i < noOfCustRecords; i++) {
            Payment p = custPaymentList.get(i);
            Object[] row = {p.getPaymentId(), p.getOrderId(), p.getDate(), p.getPayment(), p.getPaidAmount(), p.getInvoiceNo(), p.getMethod()};
            custTableModel.addRow(row);
        }

        setCustArray();
    }

    private void setCustArray() {
        custArray = new Object[noOfCustRecords][7];

        for (int i = 0; i < noOfCustRecords; i++) {
            for (int j = 0; j < 7; j++) {
                custArray[i][j] = customerTable.getValueAt(i, j);
            }
        }
    }

    private void setSupTable() {
        supTableModel.setRowCount(0);
        allRadioSup.setSelected(true);
        supplierPaymentController = new SupplierPaymentController();

        try {
            supPaymentList = supplierPaymentController.getAllPayments();
        } catch (SQLException ex) {
            Logger.getLogger(ViewPayments.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ViewPayments.class.getName()).log(Level.SEVERE, null, ex);
        }

        noOfSupRecords = supPaymentList.size();

        for (int i = 0; i < noOfSupRecords; i++) {
            Payment p = supPaymentList.get(i);
            Object[] row = {p.getPaymentId(), p.getOrderId(), p.getDate(), p.getPayment(), p.getPaidAmount(), p.getInvoiceNo(), p.getMethod()};
            supTableModel.addRow(row);
        }

        setSupArray();
    }

    private void searchSuppliers() {
        supTableModel.setRowCount(0);
        allRadioSup.setSelected(true);
        supplierPaymentController = new SupplierPaymentController();

        try {
            supPaymentList = supplierPaymentController.searchPayments(keySup, typeSup);
        } catch (SQLException ex) {
            Logger.getLogger(ViewPayments.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ViewPayments.class.getName()).log(Level.SEVERE, null, ex);
        }

        noOfSupRecords = supPaymentList.size();

        for (int i = 0; i < noOfSupRecords; i++) {
            Payment p = supPaymentList.get(i);
            Object[] row = {p.getPaymentId(), p.getOrderId(), p.getDate(), p.getPayment(), p.getPaidAmount(), p.getInvoiceNo(), p.getMethod()};
            supTableModel.addRow(row);
        }

        setSupArray();
    }

    private void setSupArray() {
        supArray = new Object[noOfSupRecords][7];

        for (int i = 0; i < noOfSupRecords; i++) {
            for (int j = 0; j < 7; j++) {
                supArray[i][j] = supplierTable.getValueAt(i, j);
            }
        }
    }
}
