/*
 * To change this tcustlate, choose Tools | Tcustlates
 * and open the tcustlate in the editor.
 */
package view;

import com.toedter.calendar.JCalendar;
import controller.CustomerController;
import extra.Extra;
import extra.LengthRestrictedDocument;
import java.awt.Dimension;
import static java.lang.Thread.sleep;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import model.Customer;

/**
 *
 * @author CM <2222cm@gmail.com>
 */
public class Customers extends javax.swing.JDialog {

    private CustomerController customerController;
    private DefaultTableModel tableModel;
    private SimpleDateFormat dateFormat;
    private ArrayList<Customer> customersList;
    private int mode;
    private boolean nameFlag, addressFlag, mobileFlag, phoneFlag, addedDateFlag;
    private String lastID = "";

    /**
     * Creates new form CustomersForm
     */
    public Customers(java.awt.Frame parent, boolean modal) {
        super(parent, modal);;

        initComponents();
        setLocationRelativeTo(null);

        customersTable.getTableHeader().setReorderingAllowed(false);
        tableModel = (DefaultTableModel) customersTable.getModel();
        dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        customersList = new ArrayList<>();

        setFieldLengths();
        setFieldsPanel(false);
        setCalendar(addedDateText.getJCalendar());
        viewAllButtonActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        homeButton = new javax.swing.JButton();
        searchPanel = new javax.swing.JPanel();
        searchText = new javax.swing.JTextField();
        searchCombo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        viewAllButton = new javax.swing.JButton();
        tablePane = new javax.swing.JScrollPane();
        customersTable = new javax.swing.JTable();
        fieldsPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        idLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        addressLabel = new javax.swing.JLabel();
        mobileLabel = new javax.swing.JLabel();
        phoneLabel = new javax.swing.JLabel();
        addedDateLabel = new javax.swing.JLabel();
        noteLabel = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        addressText = new javax.swing.JTextField();
        mobileText = new javax.swing.JTextField();
        phoneText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        notesText = new javax.swing.JTextArea();
        cancelButton = new javax.swing.JButton();
        fieldsInfoLabel = new javax.swing.JLabel();
        addedDateText = new com.toedter.calendar.JDateChooser();
        deleteButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        mainInfoLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Customers");
        setResizable(false);

        homeButton.setText("Home");
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });

        searchPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(150, 150, 150), 1, true));

        searchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextActionPerformed(evt);
            }
        });

        searchCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ID", "Name", "Address" }));
        searchCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchComboActionPerformed(evt);
            }
        });

        jLabel1.setText("Search by");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        viewAllButton.setText("View All");
        viewAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 298, Short.MAX_VALUE)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(searchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton)
                    .addComponent(viewAllButton))
                .addContainerGap())
        );

        tablePane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        customersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Address", "Mobile", "Phone", "Added Date", "Note"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customersTableMouseClicked(evt);
            }
        });
        tablePane.setViewportView(customersTable);
        customersTable.getColumnModel().getColumn(0).setMinWidth(60);
        customersTable.getColumnModel().getColumn(0).setMaxWidth(60);
        customersTable.getColumnModel().getColumn(3).setMinWidth(90);
        customersTable.getColumnModel().getColumn(3).setMaxWidth(90);
        customersTable.getColumnModel().getColumn(4).setMinWidth(90);
        customersTable.getColumnModel().getColumn(4).setMaxWidth(90);
        customersTable.getColumnModel().getColumn(5).setMinWidth(90);
        customersTable.getColumnModel().getColumn(5).setMaxWidth(90);

        fieldsPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(150, 150, 150), 1, true));

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        idLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        idLabel.setText("ID");

        nameLabel.setText("Name");

        addressLabel.setText("Address");

        mobileLabel.setText("Mobile");

        phoneLabel.setText("Phone");

        addedDateLabel.setText("Added Date");
        addedDateLabel.setPreferredSize(new java.awt.Dimension(84, 27));

        noteLabel.setText("Note");

        nameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextActionPerformed(evt);
            }
        });

        addressText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressTextActionPerformed(evt);
            }
        });

        mobileText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mobileTextActionPerformed(evt);
            }
        });
        mobileText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mobileTextKeyTyped(evt);
            }
        });

        phoneText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneTextActionPerformed(evt);
            }
        });
        phoneText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                phoneTextKeyTyped(evt);
            }
        });

        notesText.setColumns(20);
        notesText.setRows(5);
        jScrollPane1.setViewportView(notesText);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        fieldsInfoLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        fieldsInfoLabel.setForeground(new java.awt.Color(253, 47, 47));
        fieldsInfoLabel.setText(" ");
        fieldsInfoLabel.setPreferredSize(new java.awt.Dimension(400, 27));

        addedDateText.setIcon(new ImageIcon("./src/icons/calendar-icon.png"));

        javax.swing.GroupLayout fieldsPanelLayout = new javax.swing.GroupLayout(fieldsPanel);
        fieldsPanel.setLayout(fieldsPanelLayout);
        fieldsPanelLayout.setHorizontalGroup(
            fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fieldsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fieldsPanelLayout.createSequentialGroup()
                        .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(fieldsPanelLayout.createSequentialGroup()
                                .addComponent(addedDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addedDateText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(fieldsPanelLayout.createSequentialGroup()
                                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                                    .addComponent(mobileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(phoneLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addressText, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                                    .addComponent(mobileText)
                                    .addComponent(phoneText, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(fieldsPanelLayout.createSequentialGroup()
                                .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nameText, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(noteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fieldsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fieldsPanelLayout.createSequentialGroup()
                        .addComponent(fieldsInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 289, Short.MAX_VALUE)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        fieldsPanelLayout.setVerticalGroup(
            fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fieldsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(idLabel)
                .addGap(18, 18, 18)
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noteLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fieldsPanelLayout.createSequentialGroup()
                        .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addressLabel)
                            .addComponent(addressText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mobileLabel)
                            .addComponent(mobileText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(phoneLabel)
                            .addComponent(phoneText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addedDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addedDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(fieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton)
                    .addComponent(fieldsInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        deleteButton.setText("Delete");
        deleteButton.setPreferredSize(new java.awt.Dimension(90, 29));
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        newButton.setText("New");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        mainInfoLabel.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        mainInfoLabel.setText(" ");
        mainInfoLabel.setPreferredSize(new java.awt.Dimension(400, 27));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(mainInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(newButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(homeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tablePane, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fieldsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(homeButton)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editButton)
                    .addComponent(newButton)
                    .addComponent(mainInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_homeButtonActionPerformed

    private void viewAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllButtonActionPerformed
        clearFieldsPanel();
        setFieldsPanel(false);
        customerController = new CustomerController();

        try {
            customersList = customerController.getAllCustomers();
        } catch (SQLException ex) {
            Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
        }
        setTable();
        searchText.setText("");
        searchCombo.setSelectedIndex(0);
    }//GEN-LAST:event_viewAllButtonActionPerformed

    private void searchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextActionPerformed
        clearFieldsPanel();
        setFieldsPanel(false);
        String key = "", type = "";
        if (!searchText.getText().equals("")) {
            key = searchText.getText();
            int sel = searchCombo.getSelectedIndex();
            if (sel == 0) {
                type = "id";
            } else if (sel == 1) {
                type = "name";
            } else if (sel == 2) {
                type = "address";
            }

            try {
                customersList = customerController.searchCustomer(key, type);
                setTable();
            } catch (SQLException ex) {
                Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            viewAllButtonActionPerformed(null);
        }
    }//GEN-LAST:event_searchTextActionPerformed

    private void searchComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchComboActionPerformed
        searchText.setText("");
    }//GEN-LAST:event_searchComboActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchTextActionPerformed(null);
    }//GEN-LAST:event_searchButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        clearFieldsPanel();
        setFieldsPanel(false);
        mode = 0;
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void customersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customersTableMouseClicked
        mode = 0;
        if (evt.getClickCount() == 1) {
            clearFieldsPanel();
            setFieldsPanel(false);
        } else if (evt.getClickCount() == 2) {
            mode = 1;
            setFieldsPanel(true);
            JTable target = (JTable) evt.getSource();
            setFieldValues(target.getSelectedRow());
        }
    }//GEN-LAST:event_customersTableMouseClicked

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        clearFieldsPanel();
        setFieldsPanel(false);
        mode = 1;
        if (customersTable.getSelectedRow() != -1) {
            setFieldsPanel(true);
            setFieldValues(customersTable.getSelectedRow());
            nameText.requestFocus();
        } else {
            showMainMessage("Select a customer first");
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        mode = 2;
        viewAllButtonActionPerformed(null);
        String newID = new Extra().getNextID(lastID);

        clearFieldsPanel();
        setFieldsPanel(true);
        idLabel.setText(newID);
        nameText.requestFocus();
    }//GEN-LAST:event_newButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        Customer cus = setCustomer();

        if (!nameFlag) {
            showFieldsPanelMessage("Enter a name");
            nameText.requestFocus();
        } else if (!addressFlag) {
            showFieldsPanelMessage("Enter an address");
            addressText.requestFocus();
        } else if (!mobileFlag) {
            showFieldsPanelMessage("Enter a valid mobile number");
            mobileText.requestFocus();
        } else if (!phoneFlag) {
            showFieldsPanelMessage("Enter a valid phone number");
            phoneText.requestFocus();
        } else if (!addedDateFlag) {
            showFieldsPanelMessage("Enter added date");
            addedDateText.requestFocus();
        } else {
            customerController = new CustomerController();

            if (mode == 1) {
                boolean updated = false;
                try {
                    updated = customerController.updateCustomer(cus);
                } catch (SQLException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (updated) {
                    showMainMessage("Customer updated successfully");
                    clearFieldsPanel();
                    setFieldsPanel(false);
                    viewAllButtonActionPerformed(null);
                } else {
                    showMainMessage("Customer was not updated");
                }
            } else if (mode == 2) {
                boolean added = false;
                try {
                    added = customerController.addCustomer(cus);
                } catch (SQLException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (added) {
                    showMainMessage("New customer added successfully");
                    clearFieldsPanel();
                    setFieldsPanel(false);
                    viewAllButtonActionPerformed(null);
                } else {
                    showMainMessage("New customer was not added");
                }
            }
        }
        setFlags(false);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void nameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextActionPerformed
        addressText.requestFocus();
    }//GEN-LAST:event_nameTextActionPerformed

    private void addressTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressTextActionPerformed
        mobileText.requestFocus();
    }//GEN-LAST:event_addressTextActionPerformed

    private void mobileTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mobileTextActionPerformed
        phoneText.requestFocus();
    }//GEN-LAST:event_mobileTextActionPerformed

    private void phoneTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneTextActionPerformed
        saveButton.requestFocus();
    }//GEN-LAST:event_phoneTextActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        clearFieldsPanel();
        setFieldsPanel(false);
        boolean deleted = false;
        if (customersTable.getSelectedRow() != -1) {
            int confirmation = JOptionPane.showConfirmDialog(null, "Delete selected customer?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (confirmation == 0) {
                customerController = new CustomerController();
                String id = (String) customersTable.getValueAt(customersTable.getSelectedRow(), 0);

                try {
                    deleted = customerController.deleteCustomer(id);
                } catch (SQLException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }

                if (deleted) {
                    showMainMessage("'" + id + "' has been deleted");
                    viewAllButtonActionPerformed(null);
                } else {
                    showMainMessage("Customer has not been deleted");
                }
            }
        } else {
            showMainMessage("Select a customer first");
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void mobileTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mobileTextKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_mobileTextKeyTyped

    private void phoneTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneTextKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_phoneTextKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Customers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Customers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Customers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Customers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Customers dialog = new Customers(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addedDateLabel;
    private com.toedter.calendar.JDateChooser addedDateText;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JTextField addressText;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTable customersTable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel fieldsInfoLabel;
    private javax.swing.JPanel fieldsPanel;
    private javax.swing.JButton homeButton;
    private javax.swing.JLabel idLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel mainInfoLabel;
    private javax.swing.JLabel mobileLabel;
    private javax.swing.JTextField mobileText;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JButton newButton;
    private javax.swing.JLabel noteLabel;
    private javax.swing.JTextArea notesText;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JTextField phoneText;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox searchCombo;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField searchText;
    private javax.swing.JScrollPane tablePane;
    private javax.swing.JButton viewAllButton;
    // End of variables declaration//GEN-END:variables

    private void setCalendar(JCalendar calendar) {
        Dimension size = new Dimension(250, 170);
        calendar.setPreferredSize(size);
        calendar.setWeekOfYearVisible(false);
        calendar.setTodayButtonVisible(true);
    }

    private void setFieldLengths() {
        mobileText.setDocument(new LengthRestrictedDocument(10));
        phoneText.setDocument(new LengthRestrictedDocument(10));
    }

    private void setTable() {
        tableModel.setRowCount(0);
        if (!customersList.isEmpty()) {
            int phone;
            for (int i = 0; i < customersList.size(); i++) {
                Customer cust = customersList.get(i);
                lastID = cust.getId();
                phone = cust.getPhone();
                if (phone == 0) {
                    Object[] row = {cust.getId(), cust.getName(), cust.getAddress(), "0" + cust.getMobile(), null, cust.getAddedDate(), cust.getNote()};
                    tableModel.addRow(row);
                } else {
                    Object[] row = {cust.getId(), cust.getName(), cust.getAddress(), "0" + cust.getMobile(), "0" + cust.getPhone(), cust.getAddedDate(), cust.getNote()};
                    tableModel.addRow(row);
                }
            }
        } else {
            showMainMessage("No customers in database");
            lastID = new Extra().getFirstID("customer");
        }
    }

    private void setFieldsPanel(boolean b) {
        idLabel.setEnabled(b);
        nameLabel.setEnabled(b);
        addressLabel.setEnabled(b);
        mobileLabel.setEnabled(b);
        phoneLabel.setEnabled(b);
        addedDateLabel.setEnabled(b);
        noteLabel.setEnabled(b);

        nameText.setEnabled(b);
        addressText.setEnabled(b);
        mobileText.setEnabled(b);
        phoneText.setEnabled(b);
        addedDateText.setEnabled(b);
        notesText.setEnabled(b);
        saveButton.setEnabled(b);
        cancelButton.setEnabled(b);
    }

    private void clearFieldsPanel() {
        idLabel.setText("ID");
        nameText.setText("");
        addressText.setText("");
        mobileText.setText("");
        phoneText.setText("");
        addedDateText.setDate(null);
        notesText.setText("");
    }

    private void setFieldValues(int selectedRow) {
        idLabel.setText((String) customersTable.getValueAt(selectedRow, 0));
        nameText.setText((String) customersTable.getValueAt(selectedRow, 1));
        addressText.setText((String) customersTable.getValueAt(selectedRow, 2));
        mobileText.setText(customersTable.getValueAt(selectedRow, 3) + "");
        if (customersTable.getValueAt(selectedRow, 4) != null) {
            phoneText.setText(customersTable.getValueAt(selectedRow, 4) + "");
        }

        try {
            Date date = dateFormat.parse((String) customersTable.getValueAt(selectedRow, 5));
            addedDateText.setDate(date);
        } catch (ParseException ex) {
            Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
        }

        notesText.setText((String) customersTable.getValueAt(selectedRow, 6));
    }

    private Customer setCustomer() {
        String name = "", address = "", addedDate = "", note = "";
        int mobile = 0, phone = 0;
        Customer cus = null;

        if (!nameText.getText().equals("")) {
            nameFlag = true;
            name = nameText.getText();
        }
        if (!addressText.getText().equals("")) {
            addressFlag = true;
            address = addressText.getText();
        }
        if (!mobileText.getText().equals("")) {
            if (new Extra().validateMobileNumber(mobileText)) {
                mobileFlag = true;
                mobile = Integer.parseInt(mobileText.getText());
            }
        }
        if (!phoneText.getText().equals("")) {
            if (new Extra().validatePhoneNumber(phoneText)) {
                phoneFlag = true;
                phone = Integer.parseInt(phoneText.getText());
            }
        } else {
            phoneFlag = true;
        }
        if (addedDateText.getDate() != null) {
            addedDateFlag = true;
            Date d = addedDateText.getDate();
            addedDate = dateFormat.format(d);
        }
        if (!notesText.getText().equals("")) {
            note = notesText.getText();
        }

        cus = new Customer(idLabel.getText(), name, address, mobile, phone, addedDate, note);

        return cus;
    }

    private void setFlags(boolean b) {
        nameFlag = b;
        addressFlag = b;
        mobileFlag = b;
        phoneFlag = b;
        addedDateFlag = b;
    }

    private void showMainMessage(String message) {
        final String msg = message;

        new Thread() {
            public void run() {
                mainInfoLabel.setText("");
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }

                mainInfoLabel.setText(msg);
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }
                mainInfoLabel.setText("");
                try {
                    sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }

                mainInfoLabel.setText(msg);

                try {
                    sleep(5000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
                }

                mainInfoLabel.setText("");
            }
        }.start();
    }

    private void showFieldsPanelMessage(String message) {
        final String msg = message;

        new Thread() {
            public void run() {
                fieldsInfoLabel.setText("");
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }

                fieldsInfoLabel.setText(msg);
                try {
                    sleep(50);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }
                fieldsInfoLabel.setText("");
                try {
                    sleep(100);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Customers.class.getName()).log(Level.SEVERE, null, ex);
                }

                fieldsInfoLabel.setText(msg);

                try {
                    sleep(5000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(CustomerOrder.class.getName()).log(Level.SEVERE, null, ex);
                }

                fieldsInfoLabel.setText("");
            }
        }.start();
    }
}
